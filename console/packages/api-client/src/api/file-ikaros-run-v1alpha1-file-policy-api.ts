/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError,
} from '../base';
// @ts-ignore
import { FilePolicy } from '../models';
// @ts-ignore
import { PagingWrap } from '../models';
/**
 * FileIkarosRunV1alpha1FilePolicyApi - axios parameter creator
 * @export
 */
export const FileIkarosRunV1alpha1FilePolicyApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 * Create policy
		 * @param {FilePolicy} [filePolicy] Fresh FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createpolicy: async (
			filePolicy?: FilePolicy,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/apis/file.ikaros.run/v1alpha1/policy`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				filePolicy,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Delete policy
		 * @param {string} name Name of FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deletepolicy: async (
			name: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('deletepolicy', 'name', name);
			const localVarPath =
				`/apis/file.ikaros.run/v1alpha1/policy/{name}`.replace(
					`{${'name'}}`,
					encodeURIComponent(String(name))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'DELETE',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get policies by paging.
		 * @param {string} page Page of FilePolicy
		 * @param {string} size Size ofFilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getpoliciesbyPaging: async (
			page: string,
			size: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'page' is not null or undefined
			assertParamExists('getpoliciesbyPaging', 'page', page);
			// verify required parameter 'size' is not null or undefined
			assertParamExists('getpoliciesbyPaging', 'size', size);
			const localVarPath =
				`/apis/file.ikaros.run/v1alpha1/policies/{page}/{size}`
					.replace(`{${'page'}}`, encodeURIComponent(String(page)))
					.replace(`{${'size'}}`, encodeURIComponent(String(size)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get policy By Name.
		 * @param {string} name Name of FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getpolicy: async (
			name: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('getpolicy', 'name', name);
			const localVarPath =
				`/apis/file.ikaros.run/v1alpha1/policy/{name}`.replace(
					`{${'name'}}`,
					encodeURIComponent(String(name))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get policy meta value by name and metaName.
		 * @param {string} name Name of FilePolicy
		 * @param {string} metaName MetaName of FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getpolicyMeta: async (
			name: string,
			metaName: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('getpolicyMeta', 'name', name);
			// verify required parameter 'metaName' is not null or undefined
			assertParamExists('getpolicyMeta', 'metaName', metaName);
			const localVarPath =
				`/apis/file.ikaros.run/v1alpha1/policy/{name}/{metaName}`
					.replace(`{${'name'}}`, encodeURIComponent(String(name)))
					.replace(`{${'metaName'}}`, encodeURIComponent(String(metaName)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * List policies
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listpolicies: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/apis/file.ikaros.run/v1alpha1/policies`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Update policy
		 * @param {string} name Name of policy
		 * @param {FilePolicy} [filePolicy] Updated FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updatepolicy: async (
			name: string,
			filePolicy?: FilePolicy,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('updatepolicy', 'name', name);
			const localVarPath = `/apis/file.ikaros.run/v1alpha1/policy`.replace(
				`{${'name'}}`,
				encodeURIComponent(String(name))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				filePolicy,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Update policy metadata value.
		 * @param {string} name Name of policy
		 * @param {string} metaName MetaName of policy
		 * @param {string} body Updated policy Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updatepolicyMeta: async (
			name: string,
			metaName: string,
			body: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('updatepolicyMeta', 'name', name);
			// verify required parameter 'metaName' is not null or undefined
			assertParamExists('updatepolicyMeta', 'metaName', metaName);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('updatepolicyMeta', 'body', body);
			const localVarPath =
				`/apis/file.ikaros.run/v1alpha1/policy/{name}/{metaName}`
					.replace(`{${'name'}}`, encodeURIComponent(String(name)))
					.replace(`{${'metaName'}}`, encodeURIComponent(String(metaName)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				body,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * FileIkarosRunV1alpha1FilePolicyApi - functional programming interface
 * @export
 */
export const FileIkarosRunV1alpha1FilePolicyApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		FileIkarosRunV1alpha1FilePolicyApiAxiosParamCreator(configuration);
	return {
		/**
		 * Create policy
		 * @param {FilePolicy} [filePolicy] Fresh FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createpolicy(
			filePolicy?: FilePolicy,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilePolicy>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createpolicy(
				filePolicy,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Delete policy
		 * @param {string} name Name of FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deletepolicy(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deletepolicy(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Get policies by paging.
		 * @param {string} page Page of FilePolicy
		 * @param {string} size Size ofFilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getpoliciesbyPaging(
			page: string,
			size: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingWrap>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getpoliciesbyPaging(
					page,
					size,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Get policy By Name.
		 * @param {string} name Name of FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getpolicy(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilePolicy>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getpolicy(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Get policy meta value by name and metaName.
		 * @param {string} name Name of FilePolicy
		 * @param {string} metaName MetaName of FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getpolicyMeta(
			name: string,
			metaName: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getpolicyMeta(
				name,
				metaName,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * List policies
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async listpolicies(
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilePolicy>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.listpolicies(
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Update policy
		 * @param {string} name Name of policy
		 * @param {FilePolicy} [filePolicy] Updated FilePolicy
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updatepolicy(
			name: string,
			filePolicy?: FilePolicy,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilePolicy>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updatepolicy(
				name,
				filePolicy,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Update policy metadata value.
		 * @param {string} name Name of policy
		 * @param {string} metaName MetaName of policy
		 * @param {string} body Updated policy Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updatepolicyMeta(
			name: string,
			metaName: string,
			body: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilePolicy>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.updatepolicyMeta(
					name,
					metaName,
					body,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * FileIkarosRunV1alpha1FilePolicyApi - factory interface
 * @export
 */
export const FileIkarosRunV1alpha1FilePolicyApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = FileIkarosRunV1alpha1FilePolicyApiFp(configuration);
	return {
		/**
		 * Create policy
		 * @param {FileIkarosRunV1alpha1FilePolicyApiCreatepolicyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createpolicy(
			requestParameters: FileIkarosRunV1alpha1FilePolicyApiCreatepolicyRequest = {},
			options?: AxiosRequestConfig
		): AxiosPromise<FilePolicy> {
			return localVarFp
				.createpolicy(requestParameters.filePolicy, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Delete policy
		 * @param {FileIkarosRunV1alpha1FilePolicyApiDeletepolicyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deletepolicy(
			requestParameters: FileIkarosRunV1alpha1FilePolicyApiDeletepolicyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.deletepolicy(requestParameters.name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Get policies by paging.
		 * @param {FileIkarosRunV1alpha1FilePolicyApiGetpoliciesbyPagingRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getpoliciesbyPaging(
			requestParameters: FileIkarosRunV1alpha1FilePolicyApiGetpoliciesbyPagingRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<PagingWrap> {
			return localVarFp
				.getpoliciesbyPaging(
					requestParameters.page,
					requestParameters.size,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Get policy By Name.
		 * @param {FileIkarosRunV1alpha1FilePolicyApiGetpolicyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getpolicy(
			requestParameters: FileIkarosRunV1alpha1FilePolicyApiGetpolicyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<FilePolicy> {
			return localVarFp
				.getpolicy(requestParameters.name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Get policy meta value by name and metaName.
		 * @param {FileIkarosRunV1alpha1FilePolicyApiGetpolicyMetaRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getpolicyMeta(
			requestParameters: FileIkarosRunV1alpha1FilePolicyApiGetpolicyMetaRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.getpolicyMeta(
					requestParameters.name,
					requestParameters.metaName,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * List policies
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listpolicies(options?: AxiosRequestConfig): AxiosPromise<FilePolicy> {
			return localVarFp
				.listpolicies(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Update policy
		 * @param {FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updatepolicy(
			requestParameters: FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<FilePolicy> {
			return localVarFp
				.updatepolicy(
					requestParameters.name,
					requestParameters.filePolicy,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Update policy metadata value.
		 * @param {FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMetaRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updatepolicyMeta(
			requestParameters: FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMetaRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<FilePolicy> {
			return localVarFp
				.updatepolicyMeta(
					requestParameters.name,
					requestParameters.metaName,
					requestParameters.body,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for createpolicy operation in FileIkarosRunV1alpha1FilePolicyApi.
 * @export
 * @interface FileIkarosRunV1alpha1FilePolicyApiCreatepolicyRequest
 */
export interface FileIkarosRunV1alpha1FilePolicyApiCreatepolicyRequest {
	/**
	 * Fresh FilePolicy
	 * @type {FilePolicy}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiCreatepolicy
	 */
	readonly filePolicy?: FilePolicy;
}

/**
 * Request parameters for deletepolicy operation in FileIkarosRunV1alpha1FilePolicyApi.
 * @export
 * @interface FileIkarosRunV1alpha1FilePolicyApiDeletepolicyRequest
 */
export interface FileIkarosRunV1alpha1FilePolicyApiDeletepolicyRequest {
	/**
	 * Name of FilePolicy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiDeletepolicy
	 */
	readonly name: string;
}

/**
 * Request parameters for getpoliciesbyPaging operation in FileIkarosRunV1alpha1FilePolicyApi.
 * @export
 * @interface FileIkarosRunV1alpha1FilePolicyApiGetpoliciesbyPagingRequest
 */
export interface FileIkarosRunV1alpha1FilePolicyApiGetpoliciesbyPagingRequest {
	/**
	 * Page of FilePolicy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiGetpoliciesbyPaging
	 */
	readonly page: string;

	/**
	 * Size ofFilePolicy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiGetpoliciesbyPaging
	 */
	readonly size: string;
}

/**
 * Request parameters for getpolicy operation in FileIkarosRunV1alpha1FilePolicyApi.
 * @export
 * @interface FileIkarosRunV1alpha1FilePolicyApiGetpolicyRequest
 */
export interface FileIkarosRunV1alpha1FilePolicyApiGetpolicyRequest {
	/**
	 * Name of FilePolicy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiGetpolicy
	 */
	readonly name: string;
}

/**
 * Request parameters for getpolicyMeta operation in FileIkarosRunV1alpha1FilePolicyApi.
 * @export
 * @interface FileIkarosRunV1alpha1FilePolicyApiGetpolicyMetaRequest
 */
export interface FileIkarosRunV1alpha1FilePolicyApiGetpolicyMetaRequest {
	/**
	 * Name of FilePolicy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiGetpolicyMeta
	 */
	readonly name: string;

	/**
	 * MetaName of FilePolicy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiGetpolicyMeta
	 */
	readonly metaName: string;
}

/**
 * Request parameters for updatepolicy operation in FileIkarosRunV1alpha1FilePolicyApi.
 * @export
 * @interface FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyRequest
 */
export interface FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyRequest {
	/**
	 * Name of policy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiUpdatepolicy
	 */
	readonly name: string;

	/**
	 * Updated FilePolicy
	 * @type {FilePolicy}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiUpdatepolicy
	 */
	readonly filePolicy?: FilePolicy;
}

/**
 * Request parameters for updatepolicyMeta operation in FileIkarosRunV1alpha1FilePolicyApi.
 * @export
 * @interface FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMetaRequest
 */
export interface FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMetaRequest {
	/**
	 * Name of policy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMeta
	 */
	readonly name: string;

	/**
	 * MetaName of policy
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMeta
	 */
	readonly metaName: string;

	/**
	 * Updated policy Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
	 * @type {string}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMeta
	 */
	readonly body: string;
}

/**
 * FileIkarosRunV1alpha1FilePolicyApi - object-oriented interface
 * @export
 * @class FileIkarosRunV1alpha1FilePolicyApi
 * @extends {BaseAPI}
 */
export class FileIkarosRunV1alpha1FilePolicyApi extends BaseAPI {
	/**
	 * Create policy
	 * @param {FileIkarosRunV1alpha1FilePolicyApiCreatepolicyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApi
	 */
	public createpolicy(
		requestParameters: FileIkarosRunV1alpha1FilePolicyApiCreatepolicyRequest = {},
		options?: AxiosRequestConfig
	) {
		return FileIkarosRunV1alpha1FilePolicyApiFp(this.configuration)
			.createpolicy(requestParameters.filePolicy, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Delete policy
	 * @param {FileIkarosRunV1alpha1FilePolicyApiDeletepolicyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApi
	 */
	public deletepolicy(
		requestParameters: FileIkarosRunV1alpha1FilePolicyApiDeletepolicyRequest,
		options?: AxiosRequestConfig
	) {
		return FileIkarosRunV1alpha1FilePolicyApiFp(this.configuration)
			.deletepolicy(requestParameters.name, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get policies by paging.
	 * @param {FileIkarosRunV1alpha1FilePolicyApiGetpoliciesbyPagingRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApi
	 */
	public getpoliciesbyPaging(
		requestParameters: FileIkarosRunV1alpha1FilePolicyApiGetpoliciesbyPagingRequest,
		options?: AxiosRequestConfig
	) {
		return FileIkarosRunV1alpha1FilePolicyApiFp(this.configuration)
			.getpoliciesbyPaging(
				requestParameters.page,
				requestParameters.size,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get policy By Name.
	 * @param {FileIkarosRunV1alpha1FilePolicyApiGetpolicyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApi
	 */
	public getpolicy(
		requestParameters: FileIkarosRunV1alpha1FilePolicyApiGetpolicyRequest,
		options?: AxiosRequestConfig
	) {
		return FileIkarosRunV1alpha1FilePolicyApiFp(this.configuration)
			.getpolicy(requestParameters.name, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get policy meta value by name and metaName.
	 * @param {FileIkarosRunV1alpha1FilePolicyApiGetpolicyMetaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApi
	 */
	public getpolicyMeta(
		requestParameters: FileIkarosRunV1alpha1FilePolicyApiGetpolicyMetaRequest,
		options?: AxiosRequestConfig
	) {
		return FileIkarosRunV1alpha1FilePolicyApiFp(this.configuration)
			.getpolicyMeta(
				requestParameters.name,
				requestParameters.metaName,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * List policies
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApi
	 */
	public listpolicies(options?: AxiosRequestConfig) {
		return FileIkarosRunV1alpha1FilePolicyApiFp(this.configuration)
			.listpolicies(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Update policy
	 * @param {FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApi
	 */
	public updatepolicy(
		requestParameters: FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyRequest,
		options?: AxiosRequestConfig
	) {
		return FileIkarosRunV1alpha1FilePolicyApiFp(this.configuration)
			.updatepolicy(
				requestParameters.name,
				requestParameters.filePolicy,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Update policy metadata value.
	 * @param {FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMetaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FileIkarosRunV1alpha1FilePolicyApi
	 */
	public updatepolicyMeta(
		requestParameters: FileIkarosRunV1alpha1FilePolicyApiUpdatepolicyMetaRequest,
		options?: AxiosRequestConfig
	) {
		return FileIkarosRunV1alpha1FilePolicyApiFp(this.configuration)
			.updatepolicyMeta(
				requestParameters.name,
				requestParameters.metaName,
				requestParameters.body,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}
