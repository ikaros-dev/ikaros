/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { ConfigMap } from "../models";
// @ts-ignore
import { PagingWrap } from "../models";
/**
 * SettingIkarosRunV1alpha1ConfigmapApi - axios parameter creator
 * @export
 */
export const SettingIkarosRunV1alpha1ConfigmapApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Create configmap
     * @param {ConfigMap} [configMap] Fresh ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfigmap: async (
      configMap?: ConfigMap,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/setting.ikaros.run/v1alpha1/configmap`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        configMap,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete configmap
     * @param {string} name Name of ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfigmap: async (
      name: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("deleteConfigmap", "name", name);
      const localVarPath =
        `/apis/setting.ikaros.run/v1alpha1/configmap/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get configmap By Name.
     * @param {string} name Name of ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigmap: async (
      name: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("getConfigmap", "name", name);
      const localVarPath =
        `/apis/setting.ikaros.run/v1alpha1/configmap/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get configmap meta value by name and metaName.
     * @param {string} name Name of ConfigMap
     * @param {string} metaName MetaName of ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigmapMeta: async (
      name: string,
      metaName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("getConfigmapMeta", "name", name);
      // verify required parameter 'metaName' is not null or undefined
      assertParamExists("getConfigmapMeta", "metaName", metaName);
      const localVarPath =
        `/apis/setting.ikaros.run/v1alpha1/configmap/{name}/{metaName}`
          .replace(`{${"name"}}`, encodeURIComponent(String(name)))
          .replace(`{${"metaName"}}`, encodeURIComponent(String(metaName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get configmaps by paging.
     * @param {string} page Page of ConfigMap
     * @param {string} size Size ofConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigmapsByPaging: async (
      page: string,
      size: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getConfigmapsByPaging", "page", page);
      // verify required parameter 'size' is not null or undefined
      assertParamExists("getConfigmapsByPaging", "size", size);
      const localVarPath =
        `/apis/setting.ikaros.run/v1alpha1/configmaps/{page}/{size}`
          .replace(`{${"page"}}`, encodeURIComponent(String(page)))
          .replace(`{${"size"}}`, encodeURIComponent(String(size)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List configmaps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConfigmaps: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/setting.ikaros.run/v1alpha1/configmaps`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update configmap
     * @param {string} name Name of configmap
     * @param {ConfigMap} [configMap] Updated ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfigmap: async (
      name: string,
      configMap?: ConfigMap,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("updateConfigmap", "name", name);
      const localVarPath =
        `/apis/setting.ikaros.run/v1alpha1/configmap`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        configMap,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update configmap metadata value.
     * @param {string} name Name of configmap
     * @param {string} metaName MetaName of configmap
     * @param {string} body Updated Configmap Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfigmapMeta: async (
      name: string,
      metaName: string,
      body: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("updateConfigmapMeta", "name", name);
      // verify required parameter 'metaName' is not null or undefined
      assertParamExists("updateConfigmapMeta", "metaName", metaName);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("updateConfigmapMeta", "body", body);
      const localVarPath =
        `/apis/setting.ikaros.run/v1alpha1/configmap/{name}/{metaName}`
          .replace(`{${"name"}}`, encodeURIComponent(String(name)))
          .replace(`{${"metaName"}}`, encodeURIComponent(String(metaName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SettingIkarosRunV1alpha1ConfigmapApi - functional programming interface
 * @export
 */
export const SettingIkarosRunV1alpha1ConfigmapApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    SettingIkarosRunV1alpha1ConfigmapApiAxiosParamCreator(configuration);
  return {
    /**
     * Create configmap
     * @param {ConfigMap} [configMap] Fresh ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createConfigmap(
      configMap?: ConfigMap,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigMap>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createConfigmap(
        configMap,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Delete configmap
     * @param {string} name Name of ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteConfigmap(
      name: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConfigmap(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get configmap By Name.
     * @param {string} name Name of ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConfigmap(
      name: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigMap>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigmap(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get configmap meta value by name and metaName.
     * @param {string} name Name of ConfigMap
     * @param {string} metaName MetaName of ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConfigmapMeta(
      name: string,
      metaName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getConfigmapMeta(
          name,
          metaName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get configmaps by paging.
     * @param {string} page Page of ConfigMap
     * @param {string} size Size ofConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConfigmapsByPaging(
      page: string,
      size: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingWrap>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getConfigmapsByPaging(
          page,
          size,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * List configmaps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listConfigmaps(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigMap>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listConfigmaps(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update configmap
     * @param {string} name Name of configmap
     * @param {ConfigMap} [configMap] Updated ConfigMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateConfigmap(
      name: string,
      configMap?: ConfigMap,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigMap>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateConfigmap(
        name,
        configMap,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update configmap metadata value.
     * @param {string} name Name of configmap
     * @param {string} metaName MetaName of configmap
     * @param {string} body Updated Configmap Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateConfigmapMeta(
      name: string,
      metaName: string,
      body: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigMap>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateConfigmapMeta(
          name,
          metaName,
          body,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SettingIkarosRunV1alpha1ConfigmapApi - factory interface
 * @export
 */
export const SettingIkarosRunV1alpha1ConfigmapApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SettingIkarosRunV1alpha1ConfigmapApiFp(configuration);
  return {
    /**
     * Create configmap
     * @param {SettingIkarosRunV1alpha1ConfigmapApiCreateConfigmapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfigmap(
      requestParameters: SettingIkarosRunV1alpha1ConfigmapApiCreateConfigmapRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<ConfigMap> {
      return localVarFp
        .createConfigmap(requestParameters.configMap, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete configmap
     * @param {SettingIkarosRunV1alpha1ConfigmapApiDeleteConfigmapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfigmap(
      requestParameters: SettingIkarosRunV1alpha1ConfigmapApiDeleteConfigmapRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteConfigmap(requestParameters.name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get configmap By Name.
     * @param {SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigmap(
      requestParameters: SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<ConfigMap> {
      return localVarFp
        .getConfigmap(requestParameters.name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get configmap meta value by name and metaName.
     * @param {SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapMetaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigmapMeta(
      requestParameters: SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapMetaRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .getConfigmapMeta(
          requestParameters.name,
          requestParameters.metaName,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get configmaps by paging.
     * @param {SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapsByPagingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigmapsByPaging(
      requestParameters: SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapsByPagingRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<PagingWrap> {
      return localVarFp
        .getConfigmapsByPaging(
          requestParameters.page,
          requestParameters.size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * List configmaps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConfigmaps(options?: AxiosRequestConfig): AxiosPromise<ConfigMap> {
      return localVarFp
        .listConfigmaps(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update configmap
     * @param {SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfigmap(
      requestParameters: SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<ConfigMap> {
      return localVarFp
        .updateConfigmap(
          requestParameters.name,
          requestParameters.configMap,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Update configmap metadata value.
     * @param {SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMetaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfigmapMeta(
      requestParameters: SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMetaRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<ConfigMap> {
      return localVarFp
        .updateConfigmapMeta(
          requestParameters.name,
          requestParameters.metaName,
          requestParameters.body,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createConfigmap operation in SettingIkarosRunV1alpha1ConfigmapApi.
 * @export
 * @interface SettingIkarosRunV1alpha1ConfigmapApiCreateConfigmapRequest
 */
export interface SettingIkarosRunV1alpha1ConfigmapApiCreateConfigmapRequest {
  /**
   * Fresh ConfigMap
   * @type {ConfigMap}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiCreateConfigmap
   */
  readonly configMap?: ConfigMap;
}

/**
 * Request parameters for deleteConfigmap operation in SettingIkarosRunV1alpha1ConfigmapApi.
 * @export
 * @interface SettingIkarosRunV1alpha1ConfigmapApiDeleteConfigmapRequest
 */
export interface SettingIkarosRunV1alpha1ConfigmapApiDeleteConfigmapRequest {
  /**
   * Name of ConfigMap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiDeleteConfigmap
   */
  readonly name: string;
}

/**
 * Request parameters for getConfigmap operation in SettingIkarosRunV1alpha1ConfigmapApi.
 * @export
 * @interface SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapRequest
 */
export interface SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapRequest {
  /**
   * Name of ConfigMap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiGetConfigmap
   */
  readonly name: string;
}

/**
 * Request parameters for getConfigmapMeta operation in SettingIkarosRunV1alpha1ConfigmapApi.
 * @export
 * @interface SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapMetaRequest
 */
export interface SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapMetaRequest {
  /**
   * Name of ConfigMap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapMeta
   */
  readonly name: string;

  /**
   * MetaName of ConfigMap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapMeta
   */
  readonly metaName: string;
}

/**
 * Request parameters for getConfigmapsByPaging operation in SettingIkarosRunV1alpha1ConfigmapApi.
 * @export
 * @interface SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapsByPagingRequest
 */
export interface SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapsByPagingRequest {
  /**
   * Page of ConfigMap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapsByPaging
   */
  readonly page: string;

  /**
   * Size ofConfigMap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapsByPaging
   */
  readonly size: string;
}

/**
 * Request parameters for updateConfigmap operation in SettingIkarosRunV1alpha1ConfigmapApi.
 * @export
 * @interface SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapRequest
 */
export interface SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapRequest {
  /**
   * Name of configmap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmap
   */
  readonly name: string;

  /**
   * Updated ConfigMap
   * @type {ConfigMap}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmap
   */
  readonly configMap?: ConfigMap;
}

/**
 * Request parameters for updateConfigmapMeta operation in SettingIkarosRunV1alpha1ConfigmapApi.
 * @export
 * @interface SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMetaRequest
 */
export interface SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMetaRequest {
  /**
   * Name of configmap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMeta
   */
  readonly name: string;

  /**
   * MetaName of configmap
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMeta
   */
  readonly metaName: string;

  /**
   * Updated Configmap Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
   * @type {string}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMeta
   */
  readonly body: string;
}

/**
 * SettingIkarosRunV1alpha1ConfigmapApi - object-oriented interface
 * @export
 * @class SettingIkarosRunV1alpha1ConfigmapApi
 * @extends {BaseAPI}
 */
export class SettingIkarosRunV1alpha1ConfigmapApi extends BaseAPI {
  /**
   * Create configmap
   * @param {SettingIkarosRunV1alpha1ConfigmapApiCreateConfigmapRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApi
   */
  public createConfigmap(
    requestParameters: SettingIkarosRunV1alpha1ConfigmapApiCreateConfigmapRequest = {},
    options?: AxiosRequestConfig
  ) {
    return SettingIkarosRunV1alpha1ConfigmapApiFp(this.configuration)
      .createConfigmap(requestParameters.configMap, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete configmap
   * @param {SettingIkarosRunV1alpha1ConfigmapApiDeleteConfigmapRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApi
   */
  public deleteConfigmap(
    requestParameters: SettingIkarosRunV1alpha1ConfigmapApiDeleteConfigmapRequest,
    options?: AxiosRequestConfig
  ) {
    return SettingIkarosRunV1alpha1ConfigmapApiFp(this.configuration)
      .deleteConfigmap(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get configmap By Name.
   * @param {SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApi
   */
  public getConfigmap(
    requestParameters: SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapRequest,
    options?: AxiosRequestConfig
  ) {
    return SettingIkarosRunV1alpha1ConfigmapApiFp(this.configuration)
      .getConfigmap(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get configmap meta value by name and metaName.
   * @param {SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapMetaRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApi
   */
  public getConfigmapMeta(
    requestParameters: SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapMetaRequest,
    options?: AxiosRequestConfig
  ) {
    return SettingIkarosRunV1alpha1ConfigmapApiFp(this.configuration)
      .getConfigmapMeta(
        requestParameters.name,
        requestParameters.metaName,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get configmaps by paging.
   * @param {SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapsByPagingRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApi
   */
  public getConfigmapsByPaging(
    requestParameters: SettingIkarosRunV1alpha1ConfigmapApiGetConfigmapsByPagingRequest,
    options?: AxiosRequestConfig
  ) {
    return SettingIkarosRunV1alpha1ConfigmapApiFp(this.configuration)
      .getConfigmapsByPaging(
        requestParameters.page,
        requestParameters.size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List configmaps
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApi
   */
  public listConfigmaps(options?: AxiosRequestConfig) {
    return SettingIkarosRunV1alpha1ConfigmapApiFp(this.configuration)
      .listConfigmaps(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update configmap
   * @param {SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApi
   */
  public updateConfigmap(
    requestParameters: SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapRequest,
    options?: AxiosRequestConfig
  ) {
    return SettingIkarosRunV1alpha1ConfigmapApiFp(this.configuration)
      .updateConfigmap(
        requestParameters.name,
        requestParameters.configMap,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update configmap metadata value.
   * @param {SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMetaRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingIkarosRunV1alpha1ConfigmapApi
   */
  public updateConfigmapMeta(
    requestParameters: SettingIkarosRunV1alpha1ConfigmapApiUpdateConfigmapMetaRequest,
    options?: AxiosRequestConfig
  ) {
    return SettingIkarosRunV1alpha1ConfigmapApiFp(this.configuration)
      .updateConfigmapMeta(
        requestParameters.name,
        requestParameters.metaName,
        requestParameters.body,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
