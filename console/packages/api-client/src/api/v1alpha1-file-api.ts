/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError,
} from '../base';
/**
 * V1alpha1FileApi - axios parameter creator
 * @export
 */
export const V1alpha1FileApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} id File ID
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('deleteFile', 'id', id);
			const localVarPath = `/api/v1alpha1/file/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'DELETE',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		searchFiles: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v1alpha1/files`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {File} file
		 * @param {string} policyName Storage policy name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		uploadFile: async (
			file: File,
			policyName: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'file' is not null or undefined
			assertParamExists('uploadFile', 'file', file);
			// verify required parameter 'policyName' is not null or undefined
			assertParamExists('uploadFile', 'policyName', policyName);
			const localVarPath = `/api/v1alpha1/files/upload`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration &&
				configuration.formDataCtor) ||
				FormData)();

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (file !== undefined) {
				localVarFormParams.append('file', file as any);
			}

			if (policyName !== undefined) {
				localVarFormParams.append('policyName', policyName as any);
			}

			localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * V1alpha1FileApi - functional programming interface
 * @export
 */
export const V1alpha1FileApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		V1alpha1FileApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} id File ID
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteFile(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async searchFiles(
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.searchFiles(
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {File} file
		 * @param {string} policyName Storage policy name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async uploadFile(
			file: File,
			policyName: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(
				file,
				policyName,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * V1alpha1FileApi - factory interface
 * @export
 */
export const V1alpha1FileApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = V1alpha1FileApiFp(configuration);
	return {
		/**
		 *
		 * @param {V1alpha1FileApiDeleteFileRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile(
			requestParameters: V1alpha1FileApiDeleteFileRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.deleteFile(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		searchFiles(options?: AxiosRequestConfig): AxiosPromise<void> {
			return localVarFp
				.searchFiles(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {V1alpha1FileApiUploadFileRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		uploadFile(
			requestParameters: V1alpha1FileApiUploadFileRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<any> {
			return localVarFp
				.uploadFile(
					requestParameters.file,
					requestParameters.policyName,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for deleteFile operation in V1alpha1FileApi.
 * @export
 * @interface V1alpha1FileApiDeleteFileRequest
 */
export interface V1alpha1FileApiDeleteFileRequest {
	/**
	 * File ID
	 * @type {number}
	 * @memberof V1alpha1FileApiDeleteFile
	 */
	readonly id: number;
}

/**
 * Request parameters for uploadFile operation in V1alpha1FileApi.
 * @export
 * @interface V1alpha1FileApiUploadFileRequest
 */
export interface V1alpha1FileApiUploadFileRequest {
	/**
	 *
	 * @type {File}
	 * @memberof V1alpha1FileApiUploadFile
	 */
	readonly file: File;

	/**
	 * Storage policy name
	 * @type {string}
	 * @memberof V1alpha1FileApiUploadFile
	 */
	readonly policyName: string;
}

/**
 * V1alpha1FileApi - object-oriented interface
 * @export
 * @class V1alpha1FileApi
 * @extends {BaseAPI}
 */
export class V1alpha1FileApi extends BaseAPI {
	/**
	 *
	 * @param {V1alpha1FileApiDeleteFileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1FileApi
	 */
	public deleteFile(
		requestParameters: V1alpha1FileApiDeleteFileRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1FileApiFp(this.configuration)
			.deleteFile(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1FileApi
	 */
	public searchFiles(options?: AxiosRequestConfig) {
		return V1alpha1FileApiFp(this.configuration)
			.searchFiles(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {V1alpha1FileApiUploadFileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1FileApi
	 */
	public uploadFile(
		requestParameters: V1alpha1FileApiUploadFileRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1FileApiFp(this.configuration)
			.uploadFile(requestParameters.file, requestParameters.policyName, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
