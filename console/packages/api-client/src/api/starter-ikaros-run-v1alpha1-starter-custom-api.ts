/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError,
} from '../base';
// @ts-ignore
import { PagingWrap } from '../models';
// @ts-ignore
import { StarterCustom } from '../models';
/**
 * StarterIkarosRunV1alpha1StarterCustomApi - axios parameter creator
 * @export
 */
export const StarterIkarosRunV1alpha1StarterCustomApiAxiosParamCreator =
	function (configuration?: Configuration) {
		return {
			/**
			 * Create starter
			 * @param {StarterCustom} [starterCustom] Fresh StarterCustom
			 * @param {*} [options] Override http request option.
			 * @throws {RequiredError}
			 */
			createStarter: async (
				starterCustom?: StarterCustom,
				options: AxiosRequestConfig = {}
			): Promise<RequestArgs> => {
				const localVarPath = `/apis/starter.ikaros.run/v1alpha1/starter`;
				// use dummy base URL string because the URL constructor only accepts absolute URLs.
				const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
				let baseOptions;
				if (configuration) {
					baseOptions = configuration.baseOptions;
				}

				const localVarRequestOptions = {
					method: 'POST',
					...baseOptions,
					...options,
				};
				const localVarHeaderParameter = {} as any;
				const localVarQueryParameter = {} as any;

				// authentication BasicAuth required
				// http basic authentication required
				setBasicAuthToObject(localVarRequestOptions, configuration);

				// authentication BearerAuth required
				// http bearer authentication required
				await setBearerAuthToObject(localVarHeaderParameter, configuration);

				localVarHeaderParameter['Content-Type'] = 'application/json';

				setSearchParams(localVarUrlObj, localVarQueryParameter);
				let headersFromBaseOptions =
					baseOptions && baseOptions.headers ? baseOptions.headers : {};
				localVarRequestOptions.headers = {
					...localVarHeaderParameter,
					...headersFromBaseOptions,
					...options.headers,
				};
				localVarRequestOptions.data = serializeDataIfNeeded(
					starterCustom,
					localVarRequestOptions,
					configuration
				);

				return {
					url: toPathString(localVarUrlObj),
					options: localVarRequestOptions,
				};
			},
			/**
			 * Delete starter
			 * @param {string} name Name of StarterCustom
			 * @param {*} [options] Override http request option.
			 * @throws {RequiredError}
			 */
			deleteStarter: async (
				name: string,
				options: AxiosRequestConfig = {}
			): Promise<RequestArgs> => {
				// verify required parameter 'name' is not null or undefined
				assertParamExists('deleteStarter', 'name', name);
				const localVarPath =
					`/apis/starter.ikaros.run/v1alpha1/starter/{name}`.replace(
						`{${'name'}}`,
						encodeURIComponent(String(name))
					);
				// use dummy base URL string because the URL constructor only accepts absolute URLs.
				const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
				let baseOptions;
				if (configuration) {
					baseOptions = configuration.baseOptions;
				}

				const localVarRequestOptions = {
					method: 'DELETE',
					...baseOptions,
					...options,
				};
				const localVarHeaderParameter = {} as any;
				const localVarQueryParameter = {} as any;

				// authentication BasicAuth required
				// http basic authentication required
				setBasicAuthToObject(localVarRequestOptions, configuration);

				// authentication BearerAuth required
				// http bearer authentication required
				await setBearerAuthToObject(localVarHeaderParameter, configuration);

				setSearchParams(localVarUrlObj, localVarQueryParameter);
				let headersFromBaseOptions =
					baseOptions && baseOptions.headers ? baseOptions.headers : {};
				localVarRequestOptions.headers = {
					...localVarHeaderParameter,
					...headersFromBaseOptions,
					...options.headers,
				};

				return {
					url: toPathString(localVarUrlObj),
					options: localVarRequestOptions,
				};
			},
			/**
			 * Get starter By Name.
			 * @param {string} name Name of StarterCustom
			 * @param {*} [options] Override http request option.
			 * @throws {RequiredError}
			 */
			getStarter: async (
				name: string,
				options: AxiosRequestConfig = {}
			): Promise<RequestArgs> => {
				// verify required parameter 'name' is not null or undefined
				assertParamExists('getStarter', 'name', name);
				const localVarPath =
					`/apis/starter.ikaros.run/v1alpha1/starter/{name}`.replace(
						`{${'name'}}`,
						encodeURIComponent(String(name))
					);
				// use dummy base URL string because the URL constructor only accepts absolute URLs.
				const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
				let baseOptions;
				if (configuration) {
					baseOptions = configuration.baseOptions;
				}

				const localVarRequestOptions = {
					method: 'GET',
					...baseOptions,
					...options,
				};
				const localVarHeaderParameter = {} as any;
				const localVarQueryParameter = {} as any;

				// authentication BasicAuth required
				// http basic authentication required
				setBasicAuthToObject(localVarRequestOptions, configuration);

				// authentication BearerAuth required
				// http bearer authentication required
				await setBearerAuthToObject(localVarHeaderParameter, configuration);

				setSearchParams(localVarUrlObj, localVarQueryParameter);
				let headersFromBaseOptions =
					baseOptions && baseOptions.headers ? baseOptions.headers : {};
				localVarRequestOptions.headers = {
					...localVarHeaderParameter,
					...headersFromBaseOptions,
					...options.headers,
				};

				return {
					url: toPathString(localVarUrlObj),
					options: localVarRequestOptions,
				};
			},
			/**
			 * Get starter meta value by name and metaName.
			 * @param {string} name Name of StarterCustom
			 * @param {string} metaName MetaName of StarterCustom
			 * @param {*} [options] Override http request option.
			 * @throws {RequiredError}
			 */
			getStarterMeta: async (
				name: string,
				metaName: string,
				options: AxiosRequestConfig = {}
			): Promise<RequestArgs> => {
				// verify required parameter 'name' is not null or undefined
				assertParamExists('getStarterMeta', 'name', name);
				// verify required parameter 'metaName' is not null or undefined
				assertParamExists('getStarterMeta', 'metaName', metaName);
				const localVarPath =
					`/apis/starter.ikaros.run/v1alpha1/starter/{name}/{metaName}`
						.replace(`{${'name'}}`, encodeURIComponent(String(name)))
						.replace(`{${'metaName'}}`, encodeURIComponent(String(metaName)));
				// use dummy base URL string because the URL constructor only accepts absolute URLs.
				const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
				let baseOptions;
				if (configuration) {
					baseOptions = configuration.baseOptions;
				}

				const localVarRequestOptions = {
					method: 'GET',
					...baseOptions,
					...options,
				};
				const localVarHeaderParameter = {} as any;
				const localVarQueryParameter = {} as any;

				// authentication BasicAuth required
				// http basic authentication required
				setBasicAuthToObject(localVarRequestOptions, configuration);

				// authentication BearerAuth required
				// http bearer authentication required
				await setBearerAuthToObject(localVarHeaderParameter, configuration);

				setSearchParams(localVarUrlObj, localVarQueryParameter);
				let headersFromBaseOptions =
					baseOptions && baseOptions.headers ? baseOptions.headers : {};
				localVarRequestOptions.headers = {
					...localVarHeaderParameter,
					...headersFromBaseOptions,
					...options.headers,
				};

				return {
					url: toPathString(localVarUrlObj),
					options: localVarRequestOptions,
				};
			},
			/**
			 * Get starters by paging.
			 * @param {string} page Page of StarterCustom
			 * @param {string} size Size ofStarterCustom
			 * @param {*} [options] Override http request option.
			 * @throws {RequiredError}
			 */
			getStartersByPaging: async (
				page: string,
				size: string,
				options: AxiosRequestConfig = {}
			): Promise<RequestArgs> => {
				// verify required parameter 'page' is not null or undefined
				assertParamExists('getStartersByPaging', 'page', page);
				// verify required parameter 'size' is not null or undefined
				assertParamExists('getStartersByPaging', 'size', size);
				const localVarPath =
					`/apis/starter.ikaros.run/v1alpha1/starters/{page}/{size}`
						.replace(`{${'page'}}`, encodeURIComponent(String(page)))
						.replace(`{${'size'}}`, encodeURIComponent(String(size)));
				// use dummy base URL string because the URL constructor only accepts absolute URLs.
				const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
				let baseOptions;
				if (configuration) {
					baseOptions = configuration.baseOptions;
				}

				const localVarRequestOptions = {
					method: 'GET',
					...baseOptions,
					...options,
				};
				const localVarHeaderParameter = {} as any;
				const localVarQueryParameter = {} as any;

				// authentication BasicAuth required
				// http basic authentication required
				setBasicAuthToObject(localVarRequestOptions, configuration);

				// authentication BearerAuth required
				// http bearer authentication required
				await setBearerAuthToObject(localVarHeaderParameter, configuration);

				setSearchParams(localVarUrlObj, localVarQueryParameter);
				let headersFromBaseOptions =
					baseOptions && baseOptions.headers ? baseOptions.headers : {};
				localVarRequestOptions.headers = {
					...localVarHeaderParameter,
					...headersFromBaseOptions,
					...options.headers,
				};

				return {
					url: toPathString(localVarUrlObj),
					options: localVarRequestOptions,
				};
			},
			/**
			 * List starters
			 * @param {*} [options] Override http request option.
			 * @throws {RequiredError}
			 */
			listStarters: async (
				options: AxiosRequestConfig = {}
			): Promise<RequestArgs> => {
				const localVarPath = `/apis/starter.ikaros.run/v1alpha1/starters`;
				// use dummy base URL string because the URL constructor only accepts absolute URLs.
				const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
				let baseOptions;
				if (configuration) {
					baseOptions = configuration.baseOptions;
				}

				const localVarRequestOptions = {
					method: 'GET',
					...baseOptions,
					...options,
				};
				const localVarHeaderParameter = {} as any;
				const localVarQueryParameter = {} as any;

				// authentication BasicAuth required
				// http basic authentication required
				setBasicAuthToObject(localVarRequestOptions, configuration);

				// authentication BearerAuth required
				// http bearer authentication required
				await setBearerAuthToObject(localVarHeaderParameter, configuration);

				setSearchParams(localVarUrlObj, localVarQueryParameter);
				let headersFromBaseOptions =
					baseOptions && baseOptions.headers ? baseOptions.headers : {};
				localVarRequestOptions.headers = {
					...localVarHeaderParameter,
					...headersFromBaseOptions,
					...options.headers,
				};

				return {
					url: toPathString(localVarUrlObj),
					options: localVarRequestOptions,
				};
			},
			/**
			 * Update starter
			 * @param {string} name Name of starter
			 * @param {StarterCustom} [starterCustom] Updated StarterCustom
			 * @param {*} [options] Override http request option.
			 * @throws {RequiredError}
			 */
			updateStarter: async (
				name: string,
				starterCustom?: StarterCustom,
				options: AxiosRequestConfig = {}
			): Promise<RequestArgs> => {
				// verify required parameter 'name' is not null or undefined
				assertParamExists('updateStarter', 'name', name);
				const localVarPath =
					`/apis/starter.ikaros.run/v1alpha1/starter`.replace(
						`{${'name'}}`,
						encodeURIComponent(String(name))
					);
				// use dummy base URL string because the URL constructor only accepts absolute URLs.
				const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
				let baseOptions;
				if (configuration) {
					baseOptions = configuration.baseOptions;
				}

				const localVarRequestOptions = {
					method: 'PUT',
					...baseOptions,
					...options,
				};
				const localVarHeaderParameter = {} as any;
				const localVarQueryParameter = {} as any;

				// authentication BasicAuth required
				// http basic authentication required
				setBasicAuthToObject(localVarRequestOptions, configuration);

				// authentication BearerAuth required
				// http bearer authentication required
				await setBearerAuthToObject(localVarHeaderParameter, configuration);

				localVarHeaderParameter['Content-Type'] = 'application/json';

				setSearchParams(localVarUrlObj, localVarQueryParameter);
				let headersFromBaseOptions =
					baseOptions && baseOptions.headers ? baseOptions.headers : {};
				localVarRequestOptions.headers = {
					...localVarHeaderParameter,
					...headersFromBaseOptions,
					...options.headers,
				};
				localVarRequestOptions.data = serializeDataIfNeeded(
					starterCustom,
					localVarRequestOptions,
					configuration
				);

				return {
					url: toPathString(localVarUrlObj),
					options: localVarRequestOptions,
				};
			},
			/**
			 * Update starter metadata value.
			 * @param {string} name Name of starter
			 * @param {string} metaName MetaName of starter
			 * @param {string} body Updated Starter Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
			 * @param {*} [options] Override http request option.
			 * @throws {RequiredError}
			 */
			updateStarterMeta: async (
				name: string,
				metaName: string,
				body: string,
				options: AxiosRequestConfig = {}
			): Promise<RequestArgs> => {
				// verify required parameter 'name' is not null or undefined
				assertParamExists('updateStarterMeta', 'name', name);
				// verify required parameter 'metaName' is not null or undefined
				assertParamExists('updateStarterMeta', 'metaName', metaName);
				// verify required parameter 'body' is not null or undefined
				assertParamExists('updateStarterMeta', 'body', body);
				const localVarPath =
					`/apis/starter.ikaros.run/v1alpha1/starter/{name}/{metaName}`
						.replace(`{${'name'}}`, encodeURIComponent(String(name)))
						.replace(`{${'metaName'}}`, encodeURIComponent(String(metaName)));
				// use dummy base URL string because the URL constructor only accepts absolute URLs.
				const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
				let baseOptions;
				if (configuration) {
					baseOptions = configuration.baseOptions;
				}

				const localVarRequestOptions = {
					method: 'PUT',
					...baseOptions,
					...options,
				};
				const localVarHeaderParameter = {} as any;
				const localVarQueryParameter = {} as any;

				// authentication BasicAuth required
				// http basic authentication required
				setBasicAuthToObject(localVarRequestOptions, configuration);

				// authentication BearerAuth required
				// http bearer authentication required
				await setBearerAuthToObject(localVarHeaderParameter, configuration);

				localVarHeaderParameter['Content-Type'] = 'application/json';

				setSearchParams(localVarUrlObj, localVarQueryParameter);
				let headersFromBaseOptions =
					baseOptions && baseOptions.headers ? baseOptions.headers : {};
				localVarRequestOptions.headers = {
					...localVarHeaderParameter,
					...headersFromBaseOptions,
					...options.headers,
				};
				localVarRequestOptions.data = serializeDataIfNeeded(
					body,
					localVarRequestOptions,
					configuration
				);

				return {
					url: toPathString(localVarUrlObj),
					options: localVarRequestOptions,
				};
			},
		};
	};

/**
 * StarterIkarosRunV1alpha1StarterCustomApi - functional programming interface
 * @export
 */
export const StarterIkarosRunV1alpha1StarterCustomApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		StarterIkarosRunV1alpha1StarterCustomApiAxiosParamCreator(configuration);
	return {
		/**
		 * Create starter
		 * @param {StarterCustom} [starterCustom] Fresh StarterCustom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createStarter(
			starterCustom?: StarterCustom,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StarterCustom>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createStarter(
				starterCustom,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Delete starter
		 * @param {string} name Name of StarterCustom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteStarter(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStarter(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Get starter By Name.
		 * @param {string} name Name of StarterCustom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getStarter(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StarterCustom>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getStarter(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Get starter meta value by name and metaName.
		 * @param {string} name Name of StarterCustom
		 * @param {string} metaName MetaName of StarterCustom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getStarterMeta(
			name: string,
			metaName: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getStarterMeta(
				name,
				metaName,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Get starters by paging.
		 * @param {string} page Page of StarterCustom
		 * @param {string} size Size ofStarterCustom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getStartersByPaging(
			page: string,
			size: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingWrap>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getStartersByPaging(
					page,
					size,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * List starters
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async listStarters(
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StarterCustom>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.listStarters(
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Update starter
		 * @param {string} name Name of starter
		 * @param {StarterCustom} [starterCustom] Updated StarterCustom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateStarter(
			name: string,
			starterCustom?: StarterCustom,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StarterCustom>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateStarter(
				name,
				starterCustom,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Update starter metadata value.
		 * @param {string} name Name of starter
		 * @param {string} metaName MetaName of starter
		 * @param {string} body Updated Starter Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateStarterMeta(
			name: string,
			metaName: string,
			body: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StarterCustom>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.updateStarterMeta(
					name,
					metaName,
					body,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * StarterIkarosRunV1alpha1StarterCustomApi - factory interface
 * @export
 */
export const StarterIkarosRunV1alpha1StarterCustomApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = StarterIkarosRunV1alpha1StarterCustomApiFp(configuration);
	return {
		/**
		 * Create starter
		 * @param {StarterIkarosRunV1alpha1StarterCustomApiCreateStarterRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createStarter(
			requestParameters: StarterIkarosRunV1alpha1StarterCustomApiCreateStarterRequest = {},
			options?: AxiosRequestConfig
		): AxiosPromise<StarterCustom> {
			return localVarFp
				.createStarter(requestParameters.starterCustom, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Delete starter
		 * @param {StarterIkarosRunV1alpha1StarterCustomApiDeleteStarterRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteStarter(
			requestParameters: StarterIkarosRunV1alpha1StarterCustomApiDeleteStarterRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.deleteStarter(requestParameters.name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Get starter By Name.
		 * @param {StarterIkarosRunV1alpha1StarterCustomApiGetStarterRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getStarter(
			requestParameters: StarterIkarosRunV1alpha1StarterCustomApiGetStarterRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<StarterCustom> {
			return localVarFp
				.getStarter(requestParameters.name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Get starter meta value by name and metaName.
		 * @param {StarterIkarosRunV1alpha1StarterCustomApiGetStarterMetaRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getStarterMeta(
			requestParameters: StarterIkarosRunV1alpha1StarterCustomApiGetStarterMetaRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.getStarterMeta(
					requestParameters.name,
					requestParameters.metaName,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Get starters by paging.
		 * @param {StarterIkarosRunV1alpha1StarterCustomApiGetStartersByPagingRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getStartersByPaging(
			requestParameters: StarterIkarosRunV1alpha1StarterCustomApiGetStartersByPagingRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<PagingWrap> {
			return localVarFp
				.getStartersByPaging(
					requestParameters.page,
					requestParameters.size,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * List starters
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listStarters(options?: AxiosRequestConfig): AxiosPromise<StarterCustom> {
			return localVarFp
				.listStarters(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Update starter
		 * @param {StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateStarter(
			requestParameters: StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<StarterCustom> {
			return localVarFp
				.updateStarter(
					requestParameters.name,
					requestParameters.starterCustom,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Update starter metadata value.
		 * @param {StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMetaRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateStarterMeta(
			requestParameters: StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMetaRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<StarterCustom> {
			return localVarFp
				.updateStarterMeta(
					requestParameters.name,
					requestParameters.metaName,
					requestParameters.body,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for createStarter operation in StarterIkarosRunV1alpha1StarterCustomApi.
 * @export
 * @interface StarterIkarosRunV1alpha1StarterCustomApiCreateStarterRequest
 */
export interface StarterIkarosRunV1alpha1StarterCustomApiCreateStarterRequest {
	/**
	 * Fresh StarterCustom
	 * @type {StarterCustom}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiCreateStarter
	 */
	readonly starterCustom?: StarterCustom;
}

/**
 * Request parameters for deleteStarter operation in StarterIkarosRunV1alpha1StarterCustomApi.
 * @export
 * @interface StarterIkarosRunV1alpha1StarterCustomApiDeleteStarterRequest
 */
export interface StarterIkarosRunV1alpha1StarterCustomApiDeleteStarterRequest {
	/**
	 * Name of StarterCustom
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiDeleteStarter
	 */
	readonly name: string;
}

/**
 * Request parameters for getStarter operation in StarterIkarosRunV1alpha1StarterCustomApi.
 * @export
 * @interface StarterIkarosRunV1alpha1StarterCustomApiGetStarterRequest
 */
export interface StarterIkarosRunV1alpha1StarterCustomApiGetStarterRequest {
	/**
	 * Name of StarterCustom
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiGetStarter
	 */
	readonly name: string;
}

/**
 * Request parameters for getStarterMeta operation in StarterIkarosRunV1alpha1StarterCustomApi.
 * @export
 * @interface StarterIkarosRunV1alpha1StarterCustomApiGetStarterMetaRequest
 */
export interface StarterIkarosRunV1alpha1StarterCustomApiGetStarterMetaRequest {
	/**
	 * Name of StarterCustom
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiGetStarterMeta
	 */
	readonly name: string;

	/**
	 * MetaName of StarterCustom
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiGetStarterMeta
	 */
	readonly metaName: string;
}

/**
 * Request parameters for getStartersByPaging operation in StarterIkarosRunV1alpha1StarterCustomApi.
 * @export
 * @interface StarterIkarosRunV1alpha1StarterCustomApiGetStartersByPagingRequest
 */
export interface StarterIkarosRunV1alpha1StarterCustomApiGetStartersByPagingRequest {
	/**
	 * Page of StarterCustom
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiGetStartersByPaging
	 */
	readonly page: string;

	/**
	 * Size ofStarterCustom
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiGetStartersByPaging
	 */
	readonly size: string;
}

/**
 * Request parameters for updateStarter operation in StarterIkarosRunV1alpha1StarterCustomApi.
 * @export
 * @interface StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterRequest
 */
export interface StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterRequest {
	/**
	 * Name of starter
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiUpdateStarter
	 */
	readonly name: string;

	/**
	 * Updated StarterCustom
	 * @type {StarterCustom}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiUpdateStarter
	 */
	readonly starterCustom?: StarterCustom;
}

/**
 * Request parameters for updateStarterMeta operation in StarterIkarosRunV1alpha1StarterCustomApi.
 * @export
 * @interface StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMetaRequest
 */
export interface StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMetaRequest {
	/**
	 * Name of starter
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMeta
	 */
	readonly name: string;

	/**
	 * MetaName of starter
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMeta
	 */
	readonly metaName: string;

	/**
	 * Updated Starter Metadata value. current request body receive data type is byte[].class, If you specific data type is a String.class, must to add English double quotation marks.  correct is: \&quot;new value\&quot;.  incorrect is: new value.
	 * @type {string}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMeta
	 */
	readonly body: string;
}

/**
 * StarterIkarosRunV1alpha1StarterCustomApi - object-oriented interface
 * @export
 * @class StarterIkarosRunV1alpha1StarterCustomApi
 * @extends {BaseAPI}
 */
export class StarterIkarosRunV1alpha1StarterCustomApi extends BaseAPI {
	/**
	 * Create starter
	 * @param {StarterIkarosRunV1alpha1StarterCustomApiCreateStarterRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApi
	 */
	public createStarter(
		requestParameters: StarterIkarosRunV1alpha1StarterCustomApiCreateStarterRequest = {},
		options?: AxiosRequestConfig
	) {
		return StarterIkarosRunV1alpha1StarterCustomApiFp(this.configuration)
			.createStarter(requestParameters.starterCustom, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Delete starter
	 * @param {StarterIkarosRunV1alpha1StarterCustomApiDeleteStarterRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApi
	 */
	public deleteStarter(
		requestParameters: StarterIkarosRunV1alpha1StarterCustomApiDeleteStarterRequest,
		options?: AxiosRequestConfig
	) {
		return StarterIkarosRunV1alpha1StarterCustomApiFp(this.configuration)
			.deleteStarter(requestParameters.name, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get starter By Name.
	 * @param {StarterIkarosRunV1alpha1StarterCustomApiGetStarterRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApi
	 */
	public getStarter(
		requestParameters: StarterIkarosRunV1alpha1StarterCustomApiGetStarterRequest,
		options?: AxiosRequestConfig
	) {
		return StarterIkarosRunV1alpha1StarterCustomApiFp(this.configuration)
			.getStarter(requestParameters.name, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get starter meta value by name and metaName.
	 * @param {StarterIkarosRunV1alpha1StarterCustomApiGetStarterMetaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApi
	 */
	public getStarterMeta(
		requestParameters: StarterIkarosRunV1alpha1StarterCustomApiGetStarterMetaRequest,
		options?: AxiosRequestConfig
	) {
		return StarterIkarosRunV1alpha1StarterCustomApiFp(this.configuration)
			.getStarterMeta(
				requestParameters.name,
				requestParameters.metaName,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get starters by paging.
	 * @param {StarterIkarosRunV1alpha1StarterCustomApiGetStartersByPagingRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApi
	 */
	public getStartersByPaging(
		requestParameters: StarterIkarosRunV1alpha1StarterCustomApiGetStartersByPagingRequest,
		options?: AxiosRequestConfig
	) {
		return StarterIkarosRunV1alpha1StarterCustomApiFp(this.configuration)
			.getStartersByPaging(
				requestParameters.page,
				requestParameters.size,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * List starters
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApi
	 */
	public listStarters(options?: AxiosRequestConfig) {
		return StarterIkarosRunV1alpha1StarterCustomApiFp(this.configuration)
			.listStarters(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Update starter
	 * @param {StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApi
	 */
	public updateStarter(
		requestParameters: StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterRequest,
		options?: AxiosRequestConfig
	) {
		return StarterIkarosRunV1alpha1StarterCustomApiFp(this.configuration)
			.updateStarter(
				requestParameters.name,
				requestParameters.starterCustom,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Update starter metadata value.
	 * @param {StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMetaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof StarterIkarosRunV1alpha1StarterCustomApi
	 */
	public updateStarterMeta(
		requestParameters: StarterIkarosRunV1alpha1StarterCustomApiUpdateStarterMetaRequest,
		options?: AxiosRequestConfig
	) {
		return StarterIkarosRunV1alpha1StarterCustomApiFp(this.configuration)
			.updateStarterMeta(
				requestParameters.name,
				requestParameters.metaName,
				requestParameters.body,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}
