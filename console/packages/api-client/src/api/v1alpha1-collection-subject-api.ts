/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { PagingWrap } from "../models";
// @ts-ignore
import { SubjectCollection } from "../models";
/**
 * V1alpha1CollectionSubjectApi - axios parameter creator
 * @export
 */
export const V1alpha1CollectionSubjectApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Collect subject by user.
     * @param {number} subjectId Subject id.
     * @param {'WISH' | 'DOING' | 'DONE' | 'SHELVE' | 'DISCARD'} type Collection type.
     * @param {boolean} [isPrivate] Is private, default is false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectSubject: async (
      subjectId: number,
      type: "WISH" | "DOING" | "DONE" | "SHELVE" | "DISCARD",
      isPrivate?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'subjectId' is not null or undefined
      assertParamExists("collectSubject", "subjectId", subjectId);
      // verify required parameter 'type' is not null or undefined
      assertParamExists("collectSubject", "type", type);
      const localVarPath = `/api/v1alpha1/collection/subject/collect`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (subjectId !== undefined) {
        localVarQueryParameter["subjectId"] = subjectId;
      }

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (isPrivate !== undefined) {
        localVarQueryParameter["isPrivate"] = isPrivate;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Find user subject collection.
     * @param {number} subjectId Subject id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCollectionSubject: async (
      subjectId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'subjectId' is not null or undefined
      assertParamExists("findCollectionSubject", "subjectId", subjectId);
      const localVarPath =
        `/api/v1alpha1/collection/subject/{subjectId}`.replace(
          `{${"subjectId"}}`,
          encodeURIComponent(String(subjectId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Find user subject collections.
     * @param {number} [page] Current page, default is 1.
     * @param {number} [size] Page size, default is 12.
     * @param {'WISH' | 'DOING' | 'DONE' | 'SHELVE' | 'DISCARD'} [type] Collection type, default is null.
     * @param {boolean} [isPrivate] Collection is private, default is null.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCollectionSubjects: async (
      page?: number,
      size?: number,
      type?: "WISH" | "DOING" | "DONE" | "SHELVE" | "DISCARD",
      isPrivate?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1alpha1/collection/subjects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (isPrivate !== undefined) {
        localVarQueryParameter["is_private"] = isPrivate;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Remove subject collect.
     * @param {number} subjectId Subject id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSubjectCollect: async (
      subjectId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'subjectId' is not null or undefined
      assertParamExists("removeSubjectCollect", "subjectId", subjectId);
      const localVarPath = `/api/v1alpha1/collection/subject/collect`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (subjectId !== undefined) {
        localVarQueryParameter["subjectId"] = subjectId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update subject collection main episode progress.
     * @param {number} subjectId Subject id.
     * @param {number} progress Main episode progress id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollectionSubjectMainEpProgress: async (
      subjectId: number,
      progress: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'subjectId' is not null or undefined
      assertParamExists(
        "updateCollectionSubjectMainEpProgress",
        "subjectId",
        subjectId
      );
      // verify required parameter 'progress' is not null or undefined
      assertParamExists(
        "updateCollectionSubjectMainEpProgress",
        "progress",
        progress
      );
      const localVarPath =
        `/api/v1alpha1/collection/subject/mainEpisodeProgress/{subjectId}/{progress}`
          .replace(`{${"subjectId"}}`, encodeURIComponent(String(subjectId)))
          .replace(`{${"progress"}}`, encodeURIComponent(String(progress)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * V1alpha1CollectionSubjectApi - functional programming interface
 * @export
 */
export const V1alpha1CollectionSubjectApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    V1alpha1CollectionSubjectApiAxiosParamCreator(configuration);
  return {
    /**
     * Collect subject by user.
     * @param {number} subjectId Subject id.
     * @param {'WISH' | 'DOING' | 'DONE' | 'SHELVE' | 'DISCARD'} type Collection type.
     * @param {boolean} [isPrivate] Is private, default is false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async collectSubject(
      subjectId: number,
      type: "WISH" | "DOING" | "DONE" | "SHELVE" | "DISCARD",
      isPrivate?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.collectSubject(
        subjectId,
        type,
        isPrivate,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Find user subject collection.
     * @param {number} subjectId Subject id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCollectionSubject(
      subjectId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SubjectCollection>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.findCollectionSubject(
          subjectId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Find user subject collections.
     * @param {number} [page] Current page, default is 1.
     * @param {number} [size] Page size, default is 12.
     * @param {'WISH' | 'DOING' | 'DONE' | 'SHELVE' | 'DISCARD'} [type] Collection type, default is null.
     * @param {boolean} [isPrivate] Collection is private, default is null.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCollectionSubjects(
      page?: number,
      size?: number,
      type?: "WISH" | "DOING" | "DONE" | "SHELVE" | "DISCARD",
      isPrivate?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingWrap>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.findCollectionSubjects(
          page,
          size,
          type,
          isPrivate,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Remove subject collect.
     * @param {number} subjectId Subject id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeSubjectCollect(
      subjectId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.removeSubjectCollect(
          subjectId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update subject collection main episode progress.
     * @param {number} subjectId Subject id.
     * @param {number} progress Main episode progress id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCollectionSubjectMainEpProgress(
      subjectId: number,
      progress: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateCollectionSubjectMainEpProgress(
          subjectId,
          progress,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * V1alpha1CollectionSubjectApi - factory interface
 * @export
 */
export const V1alpha1CollectionSubjectApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = V1alpha1CollectionSubjectApiFp(configuration);
  return {
    /**
     * Collect subject by user.
     * @param {V1alpha1CollectionSubjectApiCollectSubjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectSubject(
      requestParameters: V1alpha1CollectionSubjectApiCollectSubjectRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .collectSubject(
          requestParameters.subjectId,
          requestParameters.type,
          requestParameters.isPrivate,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Find user subject collection.
     * @param {V1alpha1CollectionSubjectApiFindCollectionSubjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCollectionSubject(
      requestParameters: V1alpha1CollectionSubjectApiFindCollectionSubjectRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<SubjectCollection> {
      return localVarFp
        .findCollectionSubject(requestParameters.subjectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Find user subject collections.
     * @param {V1alpha1CollectionSubjectApiFindCollectionSubjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCollectionSubjects(
      requestParameters: V1alpha1CollectionSubjectApiFindCollectionSubjectsRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<PagingWrap> {
      return localVarFp
        .findCollectionSubjects(
          requestParameters.page,
          requestParameters.size,
          requestParameters.type,
          requestParameters.isPrivate,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Remove subject collect.
     * @param {V1alpha1CollectionSubjectApiRemoveSubjectCollectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSubjectCollect(
      requestParameters: V1alpha1CollectionSubjectApiRemoveSubjectCollectRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .removeSubjectCollect(requestParameters.subjectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update subject collection main episode progress.
     * @param {V1alpha1CollectionSubjectApiUpdateCollectionSubjectMainEpProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollectionSubjectMainEpProgress(
      requestParameters: V1alpha1CollectionSubjectApiUpdateCollectionSubjectMainEpProgressRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .updateCollectionSubjectMainEpProgress(
          requestParameters.subjectId,
          requestParameters.progress,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for collectSubject operation in V1alpha1CollectionSubjectApi.
 * @export
 * @interface V1alpha1CollectionSubjectApiCollectSubjectRequest
 */
export interface V1alpha1CollectionSubjectApiCollectSubjectRequest {
  /**
   * Subject id.
   * @type {number}
   * @memberof V1alpha1CollectionSubjectApiCollectSubject
   */
  readonly subjectId: number;

  /**
   * Collection type.
   * @type {'WISH' | 'DOING' | 'DONE' | 'SHELVE' | 'DISCARD'}
   * @memberof V1alpha1CollectionSubjectApiCollectSubject
   */
  readonly type: "WISH" | "DOING" | "DONE" | "SHELVE" | "DISCARD";

  /**
   * Is private, default is false.
   * @type {boolean}
   * @memberof V1alpha1CollectionSubjectApiCollectSubject
   */
  readonly isPrivate?: boolean;
}

/**
 * Request parameters for findCollectionSubject operation in V1alpha1CollectionSubjectApi.
 * @export
 * @interface V1alpha1CollectionSubjectApiFindCollectionSubjectRequest
 */
export interface V1alpha1CollectionSubjectApiFindCollectionSubjectRequest {
  /**
   * Subject id.
   * @type {number}
   * @memberof V1alpha1CollectionSubjectApiFindCollectionSubject
   */
  readonly subjectId: number;
}

/**
 * Request parameters for findCollectionSubjects operation in V1alpha1CollectionSubjectApi.
 * @export
 * @interface V1alpha1CollectionSubjectApiFindCollectionSubjectsRequest
 */
export interface V1alpha1CollectionSubjectApiFindCollectionSubjectsRequest {
  /**
   * Current page, default is 1.
   * @type {number}
   * @memberof V1alpha1CollectionSubjectApiFindCollectionSubjects
   */
  readonly page?: number;

  /**
   * Page size, default is 12.
   * @type {number}
   * @memberof V1alpha1CollectionSubjectApiFindCollectionSubjects
   */
  readonly size?: number;

  /**
   * Collection type, default is null.
   * @type {'WISH' | 'DOING' | 'DONE' | 'SHELVE' | 'DISCARD'}
   * @memberof V1alpha1CollectionSubjectApiFindCollectionSubjects
   */
  readonly type?: "WISH" | "DOING" | "DONE" | "SHELVE" | "DISCARD";

  /**
   * Collection is private, default is null.
   * @type {boolean}
   * @memberof V1alpha1CollectionSubjectApiFindCollectionSubjects
   */
  readonly isPrivate?: boolean;
}

/**
 * Request parameters for removeSubjectCollect operation in V1alpha1CollectionSubjectApi.
 * @export
 * @interface V1alpha1CollectionSubjectApiRemoveSubjectCollectRequest
 */
export interface V1alpha1CollectionSubjectApiRemoveSubjectCollectRequest {
  /**
   * Subject id.
   * @type {number}
   * @memberof V1alpha1CollectionSubjectApiRemoveSubjectCollect
   */
  readonly subjectId: number;
}

/**
 * Request parameters for updateCollectionSubjectMainEpProgress operation in V1alpha1CollectionSubjectApi.
 * @export
 * @interface V1alpha1CollectionSubjectApiUpdateCollectionSubjectMainEpProgressRequest
 */
export interface V1alpha1CollectionSubjectApiUpdateCollectionSubjectMainEpProgressRequest {
  /**
   * Subject id.
   * @type {number}
   * @memberof V1alpha1CollectionSubjectApiUpdateCollectionSubjectMainEpProgress
   */
  readonly subjectId: number;

  /**
   * Main episode progress id.
   * @type {number}
   * @memberof V1alpha1CollectionSubjectApiUpdateCollectionSubjectMainEpProgress
   */
  readonly progress: number;
}

/**
 * V1alpha1CollectionSubjectApi - object-oriented interface
 * @export
 * @class V1alpha1CollectionSubjectApi
 * @extends {BaseAPI}
 */
export class V1alpha1CollectionSubjectApi extends BaseAPI {
  /**
   * Collect subject by user.
   * @param {V1alpha1CollectionSubjectApiCollectSubjectRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1CollectionSubjectApi
   */
  public collectSubject(
    requestParameters: V1alpha1CollectionSubjectApiCollectSubjectRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1CollectionSubjectApiFp(this.configuration)
      .collectSubject(
        requestParameters.subjectId,
        requestParameters.type,
        requestParameters.isPrivate,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Find user subject collection.
   * @param {V1alpha1CollectionSubjectApiFindCollectionSubjectRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1CollectionSubjectApi
   */
  public findCollectionSubject(
    requestParameters: V1alpha1CollectionSubjectApiFindCollectionSubjectRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1CollectionSubjectApiFp(this.configuration)
      .findCollectionSubject(requestParameters.subjectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Find user subject collections.
   * @param {V1alpha1CollectionSubjectApiFindCollectionSubjectsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1CollectionSubjectApi
   */
  public findCollectionSubjects(
    requestParameters: V1alpha1CollectionSubjectApiFindCollectionSubjectsRequest = {},
    options?: AxiosRequestConfig
  ) {
    return V1alpha1CollectionSubjectApiFp(this.configuration)
      .findCollectionSubjects(
        requestParameters.page,
        requestParameters.size,
        requestParameters.type,
        requestParameters.isPrivate,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Remove subject collect.
   * @param {V1alpha1CollectionSubjectApiRemoveSubjectCollectRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1CollectionSubjectApi
   */
  public removeSubjectCollect(
    requestParameters: V1alpha1CollectionSubjectApiRemoveSubjectCollectRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1CollectionSubjectApiFp(this.configuration)
      .removeSubjectCollect(requestParameters.subjectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update subject collection main episode progress.
   * @param {V1alpha1CollectionSubjectApiUpdateCollectionSubjectMainEpProgressRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1CollectionSubjectApi
   */
  public updateCollectionSubjectMainEpProgress(
    requestParameters: V1alpha1CollectionSubjectApiUpdateCollectionSubjectMainEpProgressRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1CollectionSubjectApiFp(this.configuration)
      .updateCollectionSubjectMainEpProgress(
        requestParameters.subjectId,
        requestParameters.progress,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
