/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError,
} from '../base';
// @ts-ignore
import { EpisodeCollection } from '../models';
/**
 * V1alpha1CollectionEpisodeApi - axios parameter creator
 * @export
 */
export const V1alpha1CollectionEpisodeApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteEpisodeCollection: async (
			userId: number,
			episodeId: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userId' is not null or undefined
			assertParamExists('deleteEpisodeCollection', 'userId', userId);
			// verify required parameter 'episodeId' is not null or undefined
			assertParamExists('deleteEpisodeCollection', 'episodeId', episodeId);
			const localVarPath =
				`/api/v1alpha1/collection/episode/{userId}/{episodeId}`
					.replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
					.replace(`{${'episodeId'}}`, encodeURIComponent(String(episodeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'DELETE',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		findEpisodeCollection: async (
			userId: number,
			episodeId: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userId' is not null or undefined
			assertParamExists('findEpisodeCollection', 'userId', userId);
			// verify required parameter 'episodeId' is not null or undefined
			assertParamExists('findEpisodeCollection', 'episodeId', episodeId);
			const localVarPath =
				`/api/v1alpha1/collection/episode/{userId}/{episodeId}`
					.replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
					.replace(`{${'episodeId'}}`, encodeURIComponent(String(episodeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} subjectId Subject id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		findEpisodeCollectionsByUserIdAndSubjectId: async (
			userId: number,
			subjectId: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userId' is not null or undefined
			assertParamExists(
				'findEpisodeCollectionsByUserIdAndSubjectId',
				'userId',
				userId
			);
			// verify required parameter 'subjectId' is not null or undefined
			assertParamExists(
				'findEpisodeCollectionsByUserIdAndSubjectId',
				'subjectId',
				subjectId
			);
			const localVarPath =
				`/api/v1alpha1/collections/episode/subjectId/{userId}/{subjectId}`
					.replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
					.replace(`{${'subjectId'}}`, encodeURIComponent(String(subjectId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveEpisodeCollection: async (
			userId: number,
			episodeId: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userId' is not null or undefined
			assertParamExists('saveEpisodeCollection', 'userId', userId);
			// verify required parameter 'episodeId' is not null or undefined
			assertParamExists('saveEpisodeCollection', 'episodeId', episodeId);
			const localVarPath =
				`/api/v1alpha1/collection/episode/{userId}/{episodeId}`
					.replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
					.replace(`{${'episodeId'}}`, encodeURIComponent(String(episodeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {number} progress Episode collection progress, unit is milliseconds.
		 * @param {number} [duration] Episode collection duration, unit is milliseconds.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateEpisodeCollection: async (
			userId: number,
			episodeId: number,
			progress: number,
			duration?: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userId' is not null or undefined
			assertParamExists('updateEpisodeCollection', 'userId', userId);
			// verify required parameter 'episodeId' is not null or undefined
			assertParamExists('updateEpisodeCollection', 'episodeId', episodeId);
			// verify required parameter 'progress' is not null or undefined
			assertParamExists('updateEpisodeCollection', 'progress', progress);
			const localVarPath =
				`/api/v1alpha1/collection/episode/{userId}/{episodeId}`
					.replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
					.replace(`{${'episodeId'}}`, encodeURIComponent(String(episodeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (progress !== undefined) {
				localVarQueryParameter['progress'] = progress;
			}

			if (duration !== undefined) {
				localVarQueryParameter['duration'] = duration;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {boolean} finish Episode collection finish.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateEpisodeCollectionFinish: async (
			userId: number,
			episodeId: number,
			finish: boolean,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userId' is not null or undefined
			assertParamExists('updateEpisodeCollectionFinish', 'userId', userId);
			// verify required parameter 'episodeId' is not null or undefined
			assertParamExists(
				'updateEpisodeCollectionFinish',
				'episodeId',
				episodeId
			);
			// verify required parameter 'finish' is not null or undefined
			assertParamExists('updateEpisodeCollectionFinish', 'finish', finish);
			const localVarPath =
				`/api/v1alpha1/collection/episode/finish/{userId}/{episodeId}/{finish}`
					.replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
					.replace(`{${'episodeId'}}`, encodeURIComponent(String(episodeId)))
					.replace(`{${'finish'}}`, encodeURIComponent(String(finish)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * V1alpha1CollectionEpisodeApi - functional programming interface
 * @export
 */
export const V1alpha1CollectionEpisodeApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		V1alpha1CollectionEpisodeApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteEpisodeCollection(
			userId: number,
			episodeId: number,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<EpisodeCollection>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.deleteEpisodeCollection(
					userId,
					episodeId,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async findEpisodeCollection(
			userId: number,
			episodeId: number,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<EpisodeCollection>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.findEpisodeCollection(
					userId,
					episodeId,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} subjectId Subject id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async findEpisodeCollectionsByUserIdAndSubjectId(
			userId: number,
			subjectId: number,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<EpisodeCollection>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.findEpisodeCollectionsByUserIdAndSubjectId(
					userId,
					subjectId,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveEpisodeCollection(
			userId: number,
			episodeId: number,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<EpisodeCollection>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.saveEpisodeCollection(
					userId,
					episodeId,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {number} progress Episode collection progress, unit is milliseconds.
		 * @param {number} [duration] Episode collection duration, unit is milliseconds.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateEpisodeCollection(
			userId: number,
			episodeId: number,
			progress: number,
			duration?: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.updateEpisodeCollection(
					userId,
					episodeId,
					progress,
					duration,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} userId User id
		 * @param {number} episodeId Episode id
		 * @param {boolean} finish Episode collection finish.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateEpisodeCollectionFinish(
			userId: number,
			episodeId: number,
			finish: boolean,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.updateEpisodeCollectionFinish(
					userId,
					episodeId,
					finish,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * V1alpha1CollectionEpisodeApi - factory interface
 * @export
 */
export const V1alpha1CollectionEpisodeApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = V1alpha1CollectionEpisodeApiFp(configuration);
	return {
		/**
		 *
		 * @param {V1alpha1CollectionEpisodeApiDeleteEpisodeCollectionRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteEpisodeCollection(
			requestParameters: V1alpha1CollectionEpisodeApiDeleteEpisodeCollectionRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<EpisodeCollection> {
			return localVarFp
				.deleteEpisodeCollection(
					requestParameters.userId,
					requestParameters.episodeId,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {V1alpha1CollectionEpisodeApiFindEpisodeCollectionRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		findEpisodeCollection(
			requestParameters: V1alpha1CollectionEpisodeApiFindEpisodeCollectionRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<EpisodeCollection> {
			return localVarFp
				.findEpisodeCollection(
					requestParameters.userId,
					requestParameters.episodeId,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {V1alpha1CollectionEpisodeApiFindEpisodeCollectionsByUserIdAndSubjectIdRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		findEpisodeCollectionsByUserIdAndSubjectId(
			requestParameters: V1alpha1CollectionEpisodeApiFindEpisodeCollectionsByUserIdAndSubjectIdRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Array<EpisodeCollection>> {
			return localVarFp
				.findEpisodeCollectionsByUserIdAndSubjectId(
					requestParameters.userId,
					requestParameters.subjectId,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {V1alpha1CollectionEpisodeApiSaveEpisodeCollectionRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveEpisodeCollection(
			requestParameters: V1alpha1CollectionEpisodeApiSaveEpisodeCollectionRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<EpisodeCollection> {
			return localVarFp
				.saveEpisodeCollection(
					requestParameters.userId,
					requestParameters.episodeId,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateEpisodeCollection(
			requestParameters: V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.updateEpisodeCollection(
					requestParameters.userId,
					requestParameters.episodeId,
					requestParameters.progress,
					requestParameters.duration,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinishRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateEpisodeCollectionFinish(
			requestParameters: V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinishRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.updateEpisodeCollectionFinish(
					requestParameters.userId,
					requestParameters.episodeId,
					requestParameters.finish,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for deleteEpisodeCollection operation in V1alpha1CollectionEpisodeApi.
 * @export
 * @interface V1alpha1CollectionEpisodeApiDeleteEpisodeCollectionRequest
 */
export interface V1alpha1CollectionEpisodeApiDeleteEpisodeCollectionRequest {
	/**
	 * User id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiDeleteEpisodeCollection
	 */
	readonly userId: number;

	/**
	 * Episode id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiDeleteEpisodeCollection
	 */
	readonly episodeId: number;
}

/**
 * Request parameters for findEpisodeCollection operation in V1alpha1CollectionEpisodeApi.
 * @export
 * @interface V1alpha1CollectionEpisodeApiFindEpisodeCollectionRequest
 */
export interface V1alpha1CollectionEpisodeApiFindEpisodeCollectionRequest {
	/**
	 * User id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiFindEpisodeCollection
	 */
	readonly userId: number;

	/**
	 * Episode id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiFindEpisodeCollection
	 */
	readonly episodeId: number;
}

/**
 * Request parameters for findEpisodeCollectionsByUserIdAndSubjectId operation in V1alpha1CollectionEpisodeApi.
 * @export
 * @interface V1alpha1CollectionEpisodeApiFindEpisodeCollectionsByUserIdAndSubjectIdRequest
 */
export interface V1alpha1CollectionEpisodeApiFindEpisodeCollectionsByUserIdAndSubjectIdRequest {
	/**
	 * User id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiFindEpisodeCollectionsByUserIdAndSubjectId
	 */
	readonly userId: number;

	/**
	 * Subject id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiFindEpisodeCollectionsByUserIdAndSubjectId
	 */
	readonly subjectId: number;
}

/**
 * Request parameters for saveEpisodeCollection operation in V1alpha1CollectionEpisodeApi.
 * @export
 * @interface V1alpha1CollectionEpisodeApiSaveEpisodeCollectionRequest
 */
export interface V1alpha1CollectionEpisodeApiSaveEpisodeCollectionRequest {
	/**
	 * User id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiSaveEpisodeCollection
	 */
	readonly userId: number;

	/**
	 * Episode id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiSaveEpisodeCollection
	 */
	readonly episodeId: number;
}

/**
 * Request parameters for updateEpisodeCollection operation in V1alpha1CollectionEpisodeApi.
 * @export
 * @interface V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionRequest
 */
export interface V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionRequest {
	/**
	 * User id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiUpdateEpisodeCollection
	 */
	readonly userId: number;

	/**
	 * Episode id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiUpdateEpisodeCollection
	 */
	readonly episodeId: number;

	/**
	 * Episode collection progress, unit is milliseconds.
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiUpdateEpisodeCollection
	 */
	readonly progress: number;

	/**
	 * Episode collection duration, unit is milliseconds.
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiUpdateEpisodeCollection
	 */
	readonly duration?: number;
}

/**
 * Request parameters for updateEpisodeCollectionFinish operation in V1alpha1CollectionEpisodeApi.
 * @export
 * @interface V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinishRequest
 */
export interface V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinishRequest {
	/**
	 * User id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinish
	 */
	readonly userId: number;

	/**
	 * Episode id
	 * @type {number}
	 * @memberof V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinish
	 */
	readonly episodeId: number;

	/**
	 * Episode collection finish.
	 * @type {boolean}
	 * @memberof V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinish
	 */
	readonly finish: boolean;
}

/**
 * V1alpha1CollectionEpisodeApi - object-oriented interface
 * @export
 * @class V1alpha1CollectionEpisodeApi
 * @extends {BaseAPI}
 */
export class V1alpha1CollectionEpisodeApi extends BaseAPI {
	/**
	 *
	 * @param {V1alpha1CollectionEpisodeApiDeleteEpisodeCollectionRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1CollectionEpisodeApi
	 */
	public deleteEpisodeCollection(
		requestParameters: V1alpha1CollectionEpisodeApiDeleteEpisodeCollectionRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1CollectionEpisodeApiFp(this.configuration)
			.deleteEpisodeCollection(
				requestParameters.userId,
				requestParameters.episodeId,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {V1alpha1CollectionEpisodeApiFindEpisodeCollectionRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1CollectionEpisodeApi
	 */
	public findEpisodeCollection(
		requestParameters: V1alpha1CollectionEpisodeApiFindEpisodeCollectionRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1CollectionEpisodeApiFp(this.configuration)
			.findEpisodeCollection(
				requestParameters.userId,
				requestParameters.episodeId,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {V1alpha1CollectionEpisodeApiFindEpisodeCollectionsByUserIdAndSubjectIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1CollectionEpisodeApi
	 */
	public findEpisodeCollectionsByUserIdAndSubjectId(
		requestParameters: V1alpha1CollectionEpisodeApiFindEpisodeCollectionsByUserIdAndSubjectIdRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1CollectionEpisodeApiFp(this.configuration)
			.findEpisodeCollectionsByUserIdAndSubjectId(
				requestParameters.userId,
				requestParameters.subjectId,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {V1alpha1CollectionEpisodeApiSaveEpisodeCollectionRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1CollectionEpisodeApi
	 */
	public saveEpisodeCollection(
		requestParameters: V1alpha1CollectionEpisodeApiSaveEpisodeCollectionRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1CollectionEpisodeApiFp(this.configuration)
			.saveEpisodeCollection(
				requestParameters.userId,
				requestParameters.episodeId,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1CollectionEpisodeApi
	 */
	public updateEpisodeCollection(
		requestParameters: V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1CollectionEpisodeApiFp(this.configuration)
			.updateEpisodeCollection(
				requestParameters.userId,
				requestParameters.episodeId,
				requestParameters.progress,
				requestParameters.duration,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinishRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1CollectionEpisodeApi
	 */
	public updateEpisodeCollectionFinish(
		requestParameters: V1alpha1CollectionEpisodeApiUpdateEpisodeCollectionFinishRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1CollectionEpisodeApiFp(this.configuration)
			.updateEpisodeCollectionFinish(
				requestParameters.userId,
				requestParameters.episodeId,
				requestParameters.finish,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}
