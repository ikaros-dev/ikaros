/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError,
} from '../base';
// @ts-ignore
import { PagingWrap } from '../models';
// @ts-ignore
import { Plugin } from '../models';
/**
 * PluginIkarosRunV1alpha1PluginApi - axios parameter creator
 * @export
 */
export const PluginIkarosRunV1alpha1PluginApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 * Create plugin
		 * @param {Plugin} [plugin] Fresh Plugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createplugin: async (
			plugin?: Plugin,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/apis/plugin.ikaros.run/v1alpha1/plugin`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				plugin,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Delete plugin
		 * @param {string} name Name of Plugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteplugin: async (
			name: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('deleteplugin', 'name', name);
			const localVarPath =
				`/apis/plugin.ikaros.run/v1alpha1/plugin/{name}`.replace(
					`{${'name'}}`,
					encodeURIComponent(String(name))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'DELETE',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get plugin
		 * @param {string} name Name of Plugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getplugin: async (
			name: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('getplugin', 'name', name);
			const localVarPath =
				`/apis/plugin.ikaros.run/v1alpha1/plugin/{name}`.replace(
					`{${'name'}}`,
					encodeURIComponent(String(name))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get plugins by paging.
		 * @param {string} page Page of Plugin
		 * @param {string} size Size ofPlugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getpluginsbyPaging: async (
			page: string,
			size: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'page' is not null or undefined
			assertParamExists('getpluginsbyPaging', 'page', page);
			// verify required parameter 'size' is not null or undefined
			assertParamExists('getpluginsbyPaging', 'size', size);
			const localVarPath =
				`/apis/plugin.ikaros.run/v1alpha1/plugins/{page}/{size}`
					.replace(`{${'page'}}`, encodeURIComponent(String(page)))
					.replace(`{${'size'}}`, encodeURIComponent(String(size)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * List plugins
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listplugins: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/apis/plugin.ikaros.run/v1alpha1/plugins`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Update plugin
		 * @param {string} name Name of plugin
		 * @param {Plugin} [plugin] Updated Plugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateplugin: async (
			name: string,
			plugin?: Plugin,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('updateplugin', 'name', name);
			const localVarPath = `/apis/plugin.ikaros.run/v1alpha1/plugin`.replace(
				`{${'name'}}`,
				encodeURIComponent(String(name))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				plugin,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * PluginIkarosRunV1alpha1PluginApi - functional programming interface
 * @export
 */
export const PluginIkarosRunV1alpha1PluginApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		PluginIkarosRunV1alpha1PluginApiAxiosParamCreator(configuration);
	return {
		/**
		 * Create plugin
		 * @param {Plugin} [plugin] Fresh Plugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createplugin(
			plugin?: Plugin,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createplugin(
				plugin,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Delete plugin
		 * @param {string} name Name of Plugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteplugin(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteplugin(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Get plugin
		 * @param {string} name Name of Plugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getplugin(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getplugin(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Get plugins by paging.
		 * @param {string} page Page of Plugin
		 * @param {string} size Size ofPlugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getpluginsbyPaging(
			page: string,
			size: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingWrap>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getpluginsbyPaging(page, size, options);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * List plugins
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async listplugins(
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.listplugins(
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * Update plugin
		 * @param {string} name Name of plugin
		 * @param {Plugin} [plugin] Updated Plugin
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateplugin(
			name: string,
			plugin?: Plugin,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateplugin(
				name,
				plugin,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * PluginIkarosRunV1alpha1PluginApi - factory interface
 * @export
 */
export const PluginIkarosRunV1alpha1PluginApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = PluginIkarosRunV1alpha1PluginApiFp(configuration);
	return {
		/**
		 * Create plugin
		 * @param {PluginIkarosRunV1alpha1PluginApiCreatepluginRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createplugin(
			requestParameters: PluginIkarosRunV1alpha1PluginApiCreatepluginRequest = {},
			options?: AxiosRequestConfig
		): AxiosPromise<Plugin> {
			return localVarFp
				.createplugin(requestParameters.plugin, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Delete plugin
		 * @param {PluginIkarosRunV1alpha1PluginApiDeletepluginRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteplugin(
			requestParameters: PluginIkarosRunV1alpha1PluginApiDeletepluginRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.deleteplugin(requestParameters.name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Get plugin
		 * @param {PluginIkarosRunV1alpha1PluginApiGetpluginRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getplugin(
			requestParameters: PluginIkarosRunV1alpha1PluginApiGetpluginRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Plugin> {
			return localVarFp
				.getplugin(requestParameters.name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Get plugins by paging.
		 * @param {PluginIkarosRunV1alpha1PluginApiGetpluginsbyPagingRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getpluginsbyPaging(
			requestParameters: PluginIkarosRunV1alpha1PluginApiGetpluginsbyPagingRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<PagingWrap> {
			return localVarFp
				.getpluginsbyPaging(
					requestParameters.page,
					requestParameters.size,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * List plugins
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listplugins(options?: AxiosRequestConfig): AxiosPromise<Plugin> {
			return localVarFp
				.listplugins(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Update plugin
		 * @param {PluginIkarosRunV1alpha1PluginApiUpdatepluginRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateplugin(
			requestParameters: PluginIkarosRunV1alpha1PluginApiUpdatepluginRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Plugin> {
			return localVarFp
				.updateplugin(requestParameters.name, requestParameters.plugin, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for createplugin operation in PluginIkarosRunV1alpha1PluginApi.
 * @export
 * @interface PluginIkarosRunV1alpha1PluginApiCreatepluginRequest
 */
export interface PluginIkarosRunV1alpha1PluginApiCreatepluginRequest {
	/**
	 * Fresh Plugin
	 * @type {Plugin}
	 * @memberof PluginIkarosRunV1alpha1PluginApiCreateplugin
	 */
	readonly plugin?: Plugin;
}

/**
 * Request parameters for deleteplugin operation in PluginIkarosRunV1alpha1PluginApi.
 * @export
 * @interface PluginIkarosRunV1alpha1PluginApiDeletepluginRequest
 */
export interface PluginIkarosRunV1alpha1PluginApiDeletepluginRequest {
	/**
	 * Name of Plugin
	 * @type {string}
	 * @memberof PluginIkarosRunV1alpha1PluginApiDeleteplugin
	 */
	readonly name: string;
}

/**
 * Request parameters for getplugin operation in PluginIkarosRunV1alpha1PluginApi.
 * @export
 * @interface PluginIkarosRunV1alpha1PluginApiGetpluginRequest
 */
export interface PluginIkarosRunV1alpha1PluginApiGetpluginRequest {
	/**
	 * Name of Plugin
	 * @type {string}
	 * @memberof PluginIkarosRunV1alpha1PluginApiGetplugin
	 */
	readonly name: string;
}

/**
 * Request parameters for getpluginsbyPaging operation in PluginIkarosRunV1alpha1PluginApi.
 * @export
 * @interface PluginIkarosRunV1alpha1PluginApiGetpluginsbyPagingRequest
 */
export interface PluginIkarosRunV1alpha1PluginApiGetpluginsbyPagingRequest {
	/**
	 * Page of Plugin
	 * @type {string}
	 * @memberof PluginIkarosRunV1alpha1PluginApiGetpluginsbyPaging
	 */
	readonly page: string;

	/**
	 * Size ofPlugin
	 * @type {string}
	 * @memberof PluginIkarosRunV1alpha1PluginApiGetpluginsbyPaging
	 */
	readonly size: string;
}

/**
 * Request parameters for updateplugin operation in PluginIkarosRunV1alpha1PluginApi.
 * @export
 * @interface PluginIkarosRunV1alpha1PluginApiUpdatepluginRequest
 */
export interface PluginIkarosRunV1alpha1PluginApiUpdatepluginRequest {
	/**
	 * Name of plugin
	 * @type {string}
	 * @memberof PluginIkarosRunV1alpha1PluginApiUpdateplugin
	 */
	readonly name: string;

	/**
	 * Updated Plugin
	 * @type {Plugin}
	 * @memberof PluginIkarosRunV1alpha1PluginApiUpdateplugin
	 */
	readonly plugin?: Plugin;
}

/**
 * PluginIkarosRunV1alpha1PluginApi - object-oriented interface
 * @export
 * @class PluginIkarosRunV1alpha1PluginApi
 * @extends {BaseAPI}
 */
export class PluginIkarosRunV1alpha1PluginApi extends BaseAPI {
	/**
	 * Create plugin
	 * @param {PluginIkarosRunV1alpha1PluginApiCreatepluginRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PluginIkarosRunV1alpha1PluginApi
	 */
	public createplugin(
		requestParameters: PluginIkarosRunV1alpha1PluginApiCreatepluginRequest = {},
		options?: AxiosRequestConfig
	) {
		return PluginIkarosRunV1alpha1PluginApiFp(this.configuration)
			.createplugin(requestParameters.plugin, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Delete plugin
	 * @param {PluginIkarosRunV1alpha1PluginApiDeletepluginRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PluginIkarosRunV1alpha1PluginApi
	 */
	public deleteplugin(
		requestParameters: PluginIkarosRunV1alpha1PluginApiDeletepluginRequest,
		options?: AxiosRequestConfig
	) {
		return PluginIkarosRunV1alpha1PluginApiFp(this.configuration)
			.deleteplugin(requestParameters.name, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get plugin
	 * @param {PluginIkarosRunV1alpha1PluginApiGetpluginRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PluginIkarosRunV1alpha1PluginApi
	 */
	public getplugin(
		requestParameters: PluginIkarosRunV1alpha1PluginApiGetpluginRequest,
		options?: AxiosRequestConfig
	) {
		return PluginIkarosRunV1alpha1PluginApiFp(this.configuration)
			.getplugin(requestParameters.name, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get plugins by paging.
	 * @param {PluginIkarosRunV1alpha1PluginApiGetpluginsbyPagingRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PluginIkarosRunV1alpha1PluginApi
	 */
	public getpluginsbyPaging(
		requestParameters: PluginIkarosRunV1alpha1PluginApiGetpluginsbyPagingRequest,
		options?: AxiosRequestConfig
	) {
		return PluginIkarosRunV1alpha1PluginApiFp(this.configuration)
			.getpluginsbyPaging(
				requestParameters.page,
				requestParameters.size,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * List plugins
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PluginIkarosRunV1alpha1PluginApi
	 */
	public listplugins(options?: AxiosRequestConfig) {
		return PluginIkarosRunV1alpha1PluginApiFp(this.configuration)
			.listplugins(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Update plugin
	 * @param {PluginIkarosRunV1alpha1PluginApiUpdatepluginRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PluginIkarosRunV1alpha1PluginApi
	 */
	public updateplugin(
		requestParameters: PluginIkarosRunV1alpha1PluginApiUpdatepluginRequest,
		options?: AxiosRequestConfig
	) {
		return PluginIkarosRunV1alpha1PluginApiFp(this.configuration)
			.updateplugin(requestParameters.name, requestParameters.plugin, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
