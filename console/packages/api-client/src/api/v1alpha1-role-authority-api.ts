/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Authority } from "../models";
// @ts-ignore
import { RoleAuthorityReqParams } from "../models";
/**
 * V1alpha1RoleAuthorityApi - axios parameter creator
 * @export
 */
export const V1alpha1RoleAuthorityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Add authorities for role
     * @param {RoleAuthorityReqParams} [roleAuthorityReqParams]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAuthoritiesForRole: async (
      roleAuthorityReqParams?: RoleAuthorityReqParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1alpha1/role/authorities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleAuthorityReqParams,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete authorities for role
     * @param {RoleAuthorityReqParams} [roleAuthorityReqParams]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthoritiesForRole: async (
      roleAuthorityReqParams?: RoleAuthorityReqParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1alpha1/role/authorities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleAuthorityReqParams,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get authorities for role
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthoritiesForRole: async (
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists("getAuthoritiesForRole", "roleId", roleId);
      const localVarPath =
        `/api/v1alpha1/role/authorities/roleId/{roleId}`.replace(
          `{${"roleId"}}`,
          encodeURIComponent(String(roleId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * V1alpha1RoleAuthorityApi - functional programming interface
 * @export
 */
export const V1alpha1RoleAuthorityApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    V1alpha1RoleAuthorityApiAxiosParamCreator(configuration);
  return {
    /**
     * Add authorities for role
     * @param {RoleAuthorityReqParams} [roleAuthorityReqParams]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addAuthoritiesForRole(
      roleAuthorityReqParams?: RoleAuthorityReqParams,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Authority>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addAuthoritiesForRole(
          roleAuthorityReqParams,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Delete authorities for role
     * @param {RoleAuthorityReqParams} [roleAuthorityReqParams]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAuthoritiesForRole(
      roleAuthorityReqParams?: RoleAuthorityReqParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteAuthoritiesForRole(
          roleAuthorityReqParams,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get authorities for role
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthoritiesForRole(
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Authority>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAuthoritiesForRole(roleId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * V1alpha1RoleAuthorityApi - factory interface
 * @export
 */
export const V1alpha1RoleAuthorityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = V1alpha1RoleAuthorityApiFp(configuration);
  return {
    /**
     * Add authorities for role
     * @param {V1alpha1RoleAuthorityApiAddAuthoritiesForRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAuthoritiesForRole(
      requestParameters: V1alpha1RoleAuthorityApiAddAuthoritiesForRoleRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<Array<Authority>> {
      return localVarFp
        .addAuthoritiesForRole(
          requestParameters.roleAuthorityReqParams,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete authorities for role
     * @param {V1alpha1RoleAuthorityApiDeleteAuthoritiesForRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthoritiesForRole(
      requestParameters: V1alpha1RoleAuthorityApiDeleteAuthoritiesForRoleRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteAuthoritiesForRole(
          requestParameters.roleAuthorityReqParams,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get authorities for role
     * @param {V1alpha1RoleAuthorityApiGetAuthoritiesForRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthoritiesForRole(
      requestParameters: V1alpha1RoleAuthorityApiGetAuthoritiesForRoleRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Array<Authority>> {
      return localVarFp
        .getAuthoritiesForRole(requestParameters.roleId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for addAuthoritiesForRole operation in V1alpha1RoleAuthorityApi.
 * @export
 * @interface V1alpha1RoleAuthorityApiAddAuthoritiesForRoleRequest
 */
export interface V1alpha1RoleAuthorityApiAddAuthoritiesForRoleRequest {
  /**
   *
   * @type {RoleAuthorityReqParams}
   * @memberof V1alpha1RoleAuthorityApiAddAuthoritiesForRole
   */
  readonly roleAuthorityReqParams?: RoleAuthorityReqParams;
}

/**
 * Request parameters for deleteAuthoritiesForRole operation in V1alpha1RoleAuthorityApi.
 * @export
 * @interface V1alpha1RoleAuthorityApiDeleteAuthoritiesForRoleRequest
 */
export interface V1alpha1RoleAuthorityApiDeleteAuthoritiesForRoleRequest {
  /**
   *
   * @type {RoleAuthorityReqParams}
   * @memberof V1alpha1RoleAuthorityApiDeleteAuthoritiesForRole
   */
  readonly roleAuthorityReqParams?: RoleAuthorityReqParams;
}

/**
 * Request parameters for getAuthoritiesForRole operation in V1alpha1RoleAuthorityApi.
 * @export
 * @interface V1alpha1RoleAuthorityApiGetAuthoritiesForRoleRequest
 */
export interface V1alpha1RoleAuthorityApiGetAuthoritiesForRoleRequest {
  /**
   *
   * @type {string}
   * @memberof V1alpha1RoleAuthorityApiGetAuthoritiesForRole
   */
  readonly roleId: string;
}

/**
 * V1alpha1RoleAuthorityApi - object-oriented interface
 * @export
 * @class V1alpha1RoleAuthorityApi
 * @extends {BaseAPI}
 */
export class V1alpha1RoleAuthorityApi extends BaseAPI {
  /**
   * Add authorities for role
   * @param {V1alpha1RoleAuthorityApiAddAuthoritiesForRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1RoleAuthorityApi
   */
  public addAuthoritiesForRole(
    requestParameters: V1alpha1RoleAuthorityApiAddAuthoritiesForRoleRequest = {},
    options?: AxiosRequestConfig
  ) {
    return V1alpha1RoleAuthorityApiFp(this.configuration)
      .addAuthoritiesForRole(requestParameters.roleAuthorityReqParams, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete authorities for role
   * @param {V1alpha1RoleAuthorityApiDeleteAuthoritiesForRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1RoleAuthorityApi
   */
  public deleteAuthoritiesForRole(
    requestParameters: V1alpha1RoleAuthorityApiDeleteAuthoritiesForRoleRequest = {},
    options?: AxiosRequestConfig
  ) {
    return V1alpha1RoleAuthorityApiFp(this.configuration)
      .deleteAuthoritiesForRole(
        requestParameters.roleAuthorityReqParams,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get authorities for role
   * @param {V1alpha1RoleAuthorityApiGetAuthoritiesForRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1RoleAuthorityApi
   */
  public getAuthoritiesForRole(
    requestParameters: V1alpha1RoleAuthorityApiGetAuthoritiesForRoleRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1RoleAuthorityApiFp(this.configuration)
      .getAuthoritiesForRole(requestParameters.roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
