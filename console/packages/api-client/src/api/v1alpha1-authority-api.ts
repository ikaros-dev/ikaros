/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Authority } from "../models";
// @ts-ignore
import { PagingWrap } from "../models";
/**
 * V1alpha1AuthorityApi - axios parameter creator
 * @export
 */
export const V1alpha1AuthorityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Create authority
     * @param {Authority} [authority]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthority: async (
      authority?: Authority,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1alpha1/authority`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authority,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete authority by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthorityById: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteAuthorityById", "id", id);
      const localVarPath = `/api/v1alpha1/authority/id/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get authorities by condition
     * @param {'ALL' | 'API' | 'APIS' | 'MENU' | 'URL' | 'OTHERS'} type 权限的类型
     * @param {boolean} [allow] 是否放行
     * @param {string} [target] 权限的目标方，一般是路径
     * @param {string} [authority] 操作目标的方式，一般是HTTP的方法
     * @param {number} [page] 第几页，从1开始, 默认为1.
     * @param {number} [size] 每页条数，默认为10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthoritiesByCondition: async (
      type: "ALL" | "API" | "APIS" | "MENU" | "URL" | "OTHERS",
      allow?: boolean,
      target?: string,
      authority?: string,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      assertParamExists("getAuthoritiesByCondition", "type", type);
      const localVarPath = `/api/v1alpha1/authorities/condition`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (allow !== undefined) {
        localVarQueryParameter["allow"] = allow;
      }

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (target !== undefined) {
        localVarQueryParameter["target"] = target;
      }

      if (authority !== undefined) {
        localVarQueryParameter["authority"] = authority;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get authorities by type
     * @param {'ALL' | 'API' | 'APIS' | 'MENU' | 'URL' | 'OTHERS'} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthoritiesByType: async (
      type: "ALL" | "API" | "APIS" | "MENU" | "URL" | "OTHERS",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      assertParamExists("getAuthoritiesByType", "type", type);
      const localVarPath = `/api/v1alpha1/authorities/type/{type}`.replace(
        `{${"type"}}`,
        encodeURIComponent(String(type))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get authority types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorityTypes: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1alpha1/authority/types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * V1alpha1AuthorityApi - functional programming interface
 * @export
 */
export const V1alpha1AuthorityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    V1alpha1AuthorityApiAxiosParamCreator(configuration);
  return {
    /**
     * Create authority
     * @param {Authority} [authority]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAuthority(
      authority?: Authority,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthority(
        authority,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Delete authority by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAuthorityById(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteAuthorityById(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get authorities by condition
     * @param {'ALL' | 'API' | 'APIS' | 'MENU' | 'URL' | 'OTHERS'} type 权限的类型
     * @param {boolean} [allow] 是否放行
     * @param {string} [target] 权限的目标方，一般是路径
     * @param {string} [authority] 操作目标的方式，一般是HTTP的方法
     * @param {number} [page] 第几页，从1开始, 默认为1.
     * @param {number} [size] 每页条数，默认为10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthoritiesByCondition(
      type: "ALL" | "API" | "APIS" | "MENU" | "URL" | "OTHERS",
      allow?: boolean,
      target?: string,
      authority?: string,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingWrap>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAuthoritiesByCondition(
          type,
          allow,
          target,
          authority,
          page,
          size,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get authorities by type
     * @param {'ALL' | 'API' | 'APIS' | 'MENU' | 'URL' | 'OTHERS'} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthoritiesByType(
      type: "ALL" | "API" | "APIS" | "MENU" | "URL" | "OTHERS",
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Authority>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAuthoritiesByType(type, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get authority types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthorityTypes(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAuthorityTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * V1alpha1AuthorityApi - factory interface
 * @export
 */
export const V1alpha1AuthorityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = V1alpha1AuthorityApiFp(configuration);
  return {
    /**
     * Create authority
     * @param {V1alpha1AuthorityApiCreateAuthorityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthority(
      requestParameters: V1alpha1AuthorityApiCreateAuthorityRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .createAuthority(requestParameters.authority, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete authority by id
     * @param {V1alpha1AuthorityApiDeleteAuthorityByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthorityById(
      requestParameters: V1alpha1AuthorityApiDeleteAuthorityByIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteAuthorityById(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get authorities by condition
     * @param {V1alpha1AuthorityApiGetAuthoritiesByConditionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthoritiesByCondition(
      requestParameters: V1alpha1AuthorityApiGetAuthoritiesByConditionRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<PagingWrap> {
      return localVarFp
        .getAuthoritiesByCondition(
          requestParameters.type,
          requestParameters.allow,
          requestParameters.target,
          requestParameters.authority,
          requestParameters.page,
          requestParameters.size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get authorities by type
     * @param {V1alpha1AuthorityApiGetAuthoritiesByTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthoritiesByType(
      requestParameters: V1alpha1AuthorityApiGetAuthoritiesByTypeRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Array<Authority>> {
      return localVarFp
        .getAuthoritiesByType(requestParameters.type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get authority types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorityTypes(
      options?: AxiosRequestConfig
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getAuthorityTypes(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createAuthority operation in V1alpha1AuthorityApi.
 * @export
 * @interface V1alpha1AuthorityApiCreateAuthorityRequest
 */
export interface V1alpha1AuthorityApiCreateAuthorityRequest {
  /**
   *
   * @type {Authority}
   * @memberof V1alpha1AuthorityApiCreateAuthority
   */
  readonly authority?: Authority;
}

/**
 * Request parameters for deleteAuthorityById operation in V1alpha1AuthorityApi.
 * @export
 * @interface V1alpha1AuthorityApiDeleteAuthorityByIdRequest
 */
export interface V1alpha1AuthorityApiDeleteAuthorityByIdRequest {
  /**
   *
   * @type {string}
   * @memberof V1alpha1AuthorityApiDeleteAuthorityById
   */
  readonly id: string;
}

/**
 * Request parameters for getAuthoritiesByCondition operation in V1alpha1AuthorityApi.
 * @export
 * @interface V1alpha1AuthorityApiGetAuthoritiesByConditionRequest
 */
export interface V1alpha1AuthorityApiGetAuthoritiesByConditionRequest {
  /**
   * 权限的类型
   * @type {'ALL' | 'API' | 'APIS' | 'MENU' | 'URL' | 'OTHERS'}
   * @memberof V1alpha1AuthorityApiGetAuthoritiesByCondition
   */
  readonly type: "ALL" | "API" | "APIS" | "MENU" | "URL" | "OTHERS";

  /**
   * 是否放行
   * @type {boolean}
   * @memberof V1alpha1AuthorityApiGetAuthoritiesByCondition
   */
  readonly allow?: boolean;

  /**
   * 权限的目标方，一般是路径
   * @type {string}
   * @memberof V1alpha1AuthorityApiGetAuthoritiesByCondition
   */
  readonly target?: string;

  /**
   * 操作目标的方式，一般是HTTP的方法
   * @type {string}
   * @memberof V1alpha1AuthorityApiGetAuthoritiesByCondition
   */
  readonly authority?: string;

  /**
   * 第几页，从1开始, 默认为1.
   * @type {number}
   * @memberof V1alpha1AuthorityApiGetAuthoritiesByCondition
   */
  readonly page?: number;

  /**
   * 每页条数，默认为10.
   * @type {number}
   * @memberof V1alpha1AuthorityApiGetAuthoritiesByCondition
   */
  readonly size?: number;
}

/**
 * Request parameters for getAuthoritiesByType operation in V1alpha1AuthorityApi.
 * @export
 * @interface V1alpha1AuthorityApiGetAuthoritiesByTypeRequest
 */
export interface V1alpha1AuthorityApiGetAuthoritiesByTypeRequest {
  /**
   *
   * @type {'ALL' | 'API' | 'APIS' | 'MENU' | 'URL' | 'OTHERS'}
   * @memberof V1alpha1AuthorityApiGetAuthoritiesByType
   */
  readonly type: "ALL" | "API" | "APIS" | "MENU" | "URL" | "OTHERS";
}

/**
 * V1alpha1AuthorityApi - object-oriented interface
 * @export
 * @class V1alpha1AuthorityApi
 * @extends {BaseAPI}
 */
export class V1alpha1AuthorityApi extends BaseAPI {
  /**
   * Create authority
   * @param {V1alpha1AuthorityApiCreateAuthorityRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1AuthorityApi
   */
  public createAuthority(
    requestParameters: V1alpha1AuthorityApiCreateAuthorityRequest = {},
    options?: AxiosRequestConfig
  ) {
    return V1alpha1AuthorityApiFp(this.configuration)
      .createAuthority(requestParameters.authority, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete authority by id
   * @param {V1alpha1AuthorityApiDeleteAuthorityByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1AuthorityApi
   */
  public deleteAuthorityById(
    requestParameters: V1alpha1AuthorityApiDeleteAuthorityByIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1AuthorityApiFp(this.configuration)
      .deleteAuthorityById(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get authorities by condition
   * @param {V1alpha1AuthorityApiGetAuthoritiesByConditionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1AuthorityApi
   */
  public getAuthoritiesByCondition(
    requestParameters: V1alpha1AuthorityApiGetAuthoritiesByConditionRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1AuthorityApiFp(this.configuration)
      .getAuthoritiesByCondition(
        requestParameters.type,
        requestParameters.allow,
        requestParameters.target,
        requestParameters.authority,
        requestParameters.page,
        requestParameters.size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get authorities by type
   * @param {V1alpha1AuthorityApiGetAuthoritiesByTypeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1AuthorityApi
   */
  public getAuthoritiesByType(
    requestParameters: V1alpha1AuthorityApiGetAuthoritiesByTypeRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1AuthorityApiFp(this.configuration)
      .getAuthoritiesByType(requestParameters.type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get authority types
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1AuthorityApi
   */
  public getAuthorityTypes(options?: AxiosRequestConfig) {
    return V1alpha1AuthorityApiFp(this.configuration)
      .getAuthorityTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
