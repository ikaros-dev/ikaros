/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Episode } from "../models";
// @ts-ignore
import { EpisodeResource } from "../models";
/**
 * V1alpha1EpisodeApi - axios parameter creator
 * @export
 */
export const V1alpha1EpisodeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Delete episode by id.
     * @param {number} id Episode id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteById", "id", id);
      const localVarPath = `/api/v1alpha1/episode/id/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all by subject id.
     * @param {number} id Subject id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBySubjectId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getAllBySubjectId", "id", id);
      const localVarPath = `/api/v1alpha1/episodes/subjectId/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get attachment refs by episode id.
     * @param {number} id Episode id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttachmentRefsById: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getAttachmentRefsById", "id", id);
      const localVarPath = `/api/v1alpha1/episode/attachment/refs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get episode by episode id.
     * @param {number} id Subject id
     * @param {'MAIN' | 'PROMOTION_VIDEO' | 'OPENING_SONG' | 'ENDING_SONG' | 'SPECIAL_PROMOTION' | 'SMALL_THEATER' | 'LIVE' | 'COMMERCIAL_MESSAGE' | 'ORIGINAL_SOUND_TRACK' | 'ORIGINAL_VIDEO_ANIMATION' | 'ORIGINAL_ANIMATION_DISC' | 'MUSIC_DIST1' | 'MUSIC_DIST2' | 'MUSIC_DIST3' | 'MUSIC_DIST4' | 'MUSIC_DIST5' | 'OTHER'} group episode group
     * @param {number} sequence episode sequence
     * @param {string} name episode name, need base64 encode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById: async (
      id: number,
      group:
        | "MAIN"
        | "PROMOTION_VIDEO"
        | "OPENING_SONG"
        | "ENDING_SONG"
        | "SPECIAL_PROMOTION"
        | "SMALL_THEATER"
        | "LIVE"
        | "COMMERCIAL_MESSAGE"
        | "ORIGINAL_SOUND_TRACK"
        | "ORIGINAL_VIDEO_ANIMATION"
        | "ORIGINAL_ANIMATION_DISC"
        | "MUSIC_DIST1"
        | "MUSIC_DIST2"
        | "MUSIC_DIST3"
        | "MUSIC_DIST4"
        | "MUSIC_DIST5"
        | "OTHER",
      sequence: number,
      name: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getById", "id", id);
      // verify required parameter 'group' is not null or undefined
      assertParamExists("getById", "group", group);
      // verify required parameter 'sequence' is not null or undefined
      assertParamExists("getById", "sequence", sequence);
      // verify required parameter 'name' is not null or undefined
      assertParamExists("getById", "name", name);
      const localVarPath = `/api/v1alpha1/episode/subjectId/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (group !== undefined) {
        localVarQueryParameter["group"] = group;
      }

      if (sequence !== undefined) {
        localVarQueryParameter["sequence"] = sequence;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get episode by episode id.
     * @param {number} id Episode id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById1: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getById1", "id", id);
      const localVarPath = `/api/v1alpha1/episode/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get count matching by subject id.
     * @param {number} id Subject id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountMatchingBySubjectId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCountMatchingBySubjectId", "id", id);
      const localVarPath =
        `/api/v1alpha1/episode/count/matching/subjectId/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get count total by subject id.
     * @param {number} id Subject id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountTotalBySubjectId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCountTotalBySubjectId", "id", id);
      const localVarPath =
        `/api/v1alpha1/episode/count/total/subjectId/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Post episode.
     * @param {Episode} [episode] Episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEpisode: async (
      episode?: Episode,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1alpha1/episode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        episode,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Put episode.
     * @param {Episode} [episode] Episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putEpisode: async (
      episode?: Episode,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1alpha1/episode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        episode,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * V1alpha1EpisodeApi - functional programming interface
 * @export
 */
export const V1alpha1EpisodeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    V1alpha1EpisodeApiAxiosParamCreator(configuration);
  return {
    /**
     * Delete episode by id.
     * @param {number} id Episode id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteById(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Episode>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get all by subject id.
     * @param {number} id Subject id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBySubjectId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Episode>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllBySubjectId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get attachment refs by episode id.
     * @param {number} id Episode id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAttachmentRefsById(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<EpisodeResource>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAttachmentRefsById(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get episode by episode id.
     * @param {number} id Subject id
     * @param {'MAIN' | 'PROMOTION_VIDEO' | 'OPENING_SONG' | 'ENDING_SONG' | 'SPECIAL_PROMOTION' | 'SMALL_THEATER' | 'LIVE' | 'COMMERCIAL_MESSAGE' | 'ORIGINAL_SOUND_TRACK' | 'ORIGINAL_VIDEO_ANIMATION' | 'ORIGINAL_ANIMATION_DISC' | 'MUSIC_DIST1' | 'MUSIC_DIST2' | 'MUSIC_DIST3' | 'MUSIC_DIST4' | 'MUSIC_DIST5' | 'OTHER'} group episode group
     * @param {number} sequence episode sequence
     * @param {string} name episode name, need base64 encode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getById(
      id: number,
      group:
        | "MAIN"
        | "PROMOTION_VIDEO"
        | "OPENING_SONG"
        | "ENDING_SONG"
        | "SPECIAL_PROMOTION"
        | "SMALL_THEATER"
        | "LIVE"
        | "COMMERCIAL_MESSAGE"
        | "ORIGINAL_SOUND_TRACK"
        | "ORIGINAL_VIDEO_ANIMATION"
        | "ORIGINAL_ANIMATION_DISC"
        | "MUSIC_DIST1"
        | "MUSIC_DIST2"
        | "MUSIC_DIST3"
        | "MUSIC_DIST4"
        | "MUSIC_DIST5"
        | "OTHER",
      sequence: number,
      name: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Episode>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getById(
        id,
        group,
        sequence,
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get episode by episode id.
     * @param {number} id Episode id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getById1(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Episode>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getById1(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get count matching by subject id.
     * @param {number} id Subject id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCountMatchingBySubjectId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCountMatchingBySubjectId(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get count total by subject id.
     * @param {number} id Subject id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCountTotalBySubjectId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCountTotalBySubjectId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Post episode.
     * @param {Episode} [episode] Episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postEpisode(
      episode?: Episode,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Episode>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postEpisode(
        episode,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Put episode.
     * @param {Episode} [episode] Episode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putEpisode(
      episode?: Episode,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Episode>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putEpisode(
        episode,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * V1alpha1EpisodeApi - factory interface
 * @export
 */
export const V1alpha1EpisodeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = V1alpha1EpisodeApiFp(configuration);
  return {
    /**
     * Delete episode by id.
     * @param {V1alpha1EpisodeApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById(
      requestParameters: V1alpha1EpisodeApiDeleteByIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Episode> {
      return localVarFp
        .deleteById(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all by subject id.
     * @param {V1alpha1EpisodeApiGetAllBySubjectIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBySubjectId(
      requestParameters: V1alpha1EpisodeApiGetAllBySubjectIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Array<Episode>> {
      return localVarFp
        .getAllBySubjectId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get attachment refs by episode id.
     * @param {V1alpha1EpisodeApiGetAttachmentRefsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttachmentRefsById(
      requestParameters: V1alpha1EpisodeApiGetAttachmentRefsByIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Array<EpisodeResource>> {
      return localVarFp
        .getAttachmentRefsById(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get episode by episode id.
     * @param {V1alpha1EpisodeApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(
      requestParameters: V1alpha1EpisodeApiGetByIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Episode> {
      return localVarFp
        .getById(
          requestParameters.id,
          requestParameters.group,
          requestParameters.sequence,
          requestParameters.name,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get episode by episode id.
     * @param {V1alpha1EpisodeApiGetById1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById1(
      requestParameters: V1alpha1EpisodeApiGetById1Request,
      options?: AxiosRequestConfig
    ): AxiosPromise<Episode> {
      return localVarFp
        .getById1(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get count matching by subject id.
     * @param {V1alpha1EpisodeApiGetCountMatchingBySubjectIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountMatchingBySubjectId(
      requestParameters: V1alpha1EpisodeApiGetCountMatchingBySubjectIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<number> {
      return localVarFp
        .getCountMatchingBySubjectId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get count total by subject id.
     * @param {V1alpha1EpisodeApiGetCountTotalBySubjectIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountTotalBySubjectId(
      requestParameters: V1alpha1EpisodeApiGetCountTotalBySubjectIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<number> {
      return localVarFp
        .getCountTotalBySubjectId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Post episode.
     * @param {V1alpha1EpisodeApiPostEpisodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEpisode(
      requestParameters: V1alpha1EpisodeApiPostEpisodeRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<Episode> {
      return localVarFp
        .postEpisode(requestParameters.episode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Put episode.
     * @param {V1alpha1EpisodeApiPutEpisodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putEpisode(
      requestParameters: V1alpha1EpisodeApiPutEpisodeRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<Episode> {
      return localVarFp
        .putEpisode(requestParameters.episode, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for deleteById operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiDeleteByIdRequest
 */
export interface V1alpha1EpisodeApiDeleteByIdRequest {
  /**
   * Episode id.
   * @type {number}
   * @memberof V1alpha1EpisodeApiDeleteById
   */
  readonly id: number;
}

/**
 * Request parameters for getAllBySubjectId operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiGetAllBySubjectIdRequest
 */
export interface V1alpha1EpisodeApiGetAllBySubjectIdRequest {
  /**
   * Subject id
   * @type {number}
   * @memberof V1alpha1EpisodeApiGetAllBySubjectId
   */
  readonly id: number;
}

/**
 * Request parameters for getAttachmentRefsById operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiGetAttachmentRefsByIdRequest
 */
export interface V1alpha1EpisodeApiGetAttachmentRefsByIdRequest {
  /**
   * Episode id
   * @type {number}
   * @memberof V1alpha1EpisodeApiGetAttachmentRefsById
   */
  readonly id: number;
}

/**
 * Request parameters for getById operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiGetByIdRequest
 */
export interface V1alpha1EpisodeApiGetByIdRequest {
  /**
   * Subject id
   * @type {number}
   * @memberof V1alpha1EpisodeApiGetById
   */
  readonly id: number;

  /**
   * episode group
   * @type {'MAIN' | 'PROMOTION_VIDEO' | 'OPENING_SONG' | 'ENDING_SONG' | 'SPECIAL_PROMOTION' | 'SMALL_THEATER' | 'LIVE' | 'COMMERCIAL_MESSAGE' | 'ORIGINAL_SOUND_TRACK' | 'ORIGINAL_VIDEO_ANIMATION' | 'ORIGINAL_ANIMATION_DISC' | 'MUSIC_DIST1' | 'MUSIC_DIST2' | 'MUSIC_DIST3' | 'MUSIC_DIST4' | 'MUSIC_DIST5' | 'OTHER'}
   * @memberof V1alpha1EpisodeApiGetById
   */
  readonly group:
    | "MAIN"
    | "PROMOTION_VIDEO"
    | "OPENING_SONG"
    | "ENDING_SONG"
    | "SPECIAL_PROMOTION"
    | "SMALL_THEATER"
    | "LIVE"
    | "COMMERCIAL_MESSAGE"
    | "ORIGINAL_SOUND_TRACK"
    | "ORIGINAL_VIDEO_ANIMATION"
    | "ORIGINAL_ANIMATION_DISC"
    | "MUSIC_DIST1"
    | "MUSIC_DIST2"
    | "MUSIC_DIST3"
    | "MUSIC_DIST4"
    | "MUSIC_DIST5"
    | "OTHER";

  /**
   * episode sequence
   * @type {number}
   * @memberof V1alpha1EpisodeApiGetById
   */
  readonly sequence: number;

  /**
   * episode name, need base64 encode.
   * @type {string}
   * @memberof V1alpha1EpisodeApiGetById
   */
  readonly name: string;
}

/**
 * Request parameters for getById1 operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiGetById1Request
 */
export interface V1alpha1EpisodeApiGetById1Request {
  /**
   * Episode id
   * @type {number}
   * @memberof V1alpha1EpisodeApiGetById1
   */
  readonly id: number;
}

/**
 * Request parameters for getCountMatchingBySubjectId operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiGetCountMatchingBySubjectIdRequest
 */
export interface V1alpha1EpisodeApiGetCountMatchingBySubjectIdRequest {
  /**
   * Subject id
   * @type {number}
   * @memberof V1alpha1EpisodeApiGetCountMatchingBySubjectId
   */
  readonly id: number;
}

/**
 * Request parameters for getCountTotalBySubjectId operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiGetCountTotalBySubjectIdRequest
 */
export interface V1alpha1EpisodeApiGetCountTotalBySubjectIdRequest {
  /**
   * Subject id
   * @type {number}
   * @memberof V1alpha1EpisodeApiGetCountTotalBySubjectId
   */
  readonly id: number;
}

/**
 * Request parameters for postEpisode operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiPostEpisodeRequest
 */
export interface V1alpha1EpisodeApiPostEpisodeRequest {
  /**
   * Episode
   * @type {Episode}
   * @memberof V1alpha1EpisodeApiPostEpisode
   */
  readonly episode?: Episode;
}

/**
 * Request parameters for putEpisode operation in V1alpha1EpisodeApi.
 * @export
 * @interface V1alpha1EpisodeApiPutEpisodeRequest
 */
export interface V1alpha1EpisodeApiPutEpisodeRequest {
  /**
   * Episode
   * @type {Episode}
   * @memberof V1alpha1EpisodeApiPutEpisode
   */
  readonly episode?: Episode;
}

/**
 * V1alpha1EpisodeApi - object-oriented interface
 * @export
 * @class V1alpha1EpisodeApi
 * @extends {BaseAPI}
 */
export class V1alpha1EpisodeApi extends BaseAPI {
  /**
   * Delete episode by id.
   * @param {V1alpha1EpisodeApiDeleteByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public deleteById(
    requestParameters: V1alpha1EpisodeApiDeleteByIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .deleteById(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get all by subject id.
   * @param {V1alpha1EpisodeApiGetAllBySubjectIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public getAllBySubjectId(
    requestParameters: V1alpha1EpisodeApiGetAllBySubjectIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .getAllBySubjectId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get attachment refs by episode id.
   * @param {V1alpha1EpisodeApiGetAttachmentRefsByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public getAttachmentRefsById(
    requestParameters: V1alpha1EpisodeApiGetAttachmentRefsByIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .getAttachmentRefsById(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get episode by episode id.
   * @param {V1alpha1EpisodeApiGetByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public getById(
    requestParameters: V1alpha1EpisodeApiGetByIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .getById(
        requestParameters.id,
        requestParameters.group,
        requestParameters.sequence,
        requestParameters.name,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get episode by episode id.
   * @param {V1alpha1EpisodeApiGetById1Request} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public getById1(
    requestParameters: V1alpha1EpisodeApiGetById1Request,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .getById1(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get count matching by subject id.
   * @param {V1alpha1EpisodeApiGetCountMatchingBySubjectIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public getCountMatchingBySubjectId(
    requestParameters: V1alpha1EpisodeApiGetCountMatchingBySubjectIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .getCountMatchingBySubjectId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get count total by subject id.
   * @param {V1alpha1EpisodeApiGetCountTotalBySubjectIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public getCountTotalBySubjectId(
    requestParameters: V1alpha1EpisodeApiGetCountTotalBySubjectIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .getCountTotalBySubjectId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Post episode.
   * @param {V1alpha1EpisodeApiPostEpisodeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public postEpisode(
    requestParameters: V1alpha1EpisodeApiPostEpisodeRequest = {},
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .postEpisode(requestParameters.episode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Put episode.
   * @param {V1alpha1EpisodeApiPutEpisodeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1EpisodeApi
   */
  public putEpisode(
    requestParameters: V1alpha1EpisodeApiPutEpisodeRequest = {},
    options?: AxiosRequestConfig
  ) {
    return V1alpha1EpisodeApiFp(this.configuration)
      .putEpisode(requestParameters.episode, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
