/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { UpdateUserRequest } from "../models";
// @ts-ignore
import { User } from "../models";
/**
 * V1alpha1UserMeApi - axios parameter creator
 * @export
 */
export const V1alpha1UserMeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Bind user and email.
     * @param {string} email Email for user.
     * @param {string} verificationCode Verification code once.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    bindEmail: async (
      email: string,
      verificationCode: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists("bindEmail", "email", email);
      // verify required parameter 'verificationCode' is not null or undefined
      assertParamExists("bindEmail", "verificationCode", verificationCode);
      const localVarPath = `/api/v1alpha1/user/me/email`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      if (verificationCode !== undefined) {
        localVarQueryParameter["verificationCode"] = verificationCode;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Bind user and telephone.
     * @param {string} telephone Telephone for user.
     * @param {string} verificationCode Verification code once.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    bindTelephone: async (
      telephone: string,
      verificationCode: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'telephone' is not null or undefined
      assertParamExists("bindTelephone", "telephone", telephone);
      // verify required parameter 'verificationCode' is not null or undefined
      assertParamExists("bindTelephone", "verificationCode", verificationCode);
      const localVarPath = `/api/v1alpha1/user/me/telephone`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (telephone !== undefined) {
        localVarQueryParameter["telephone"] = telephone;
      }

      if (verificationCode !== undefined) {
        localVarQueryParameter["verificationCode"] = verificationCode;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Change user password.
     * @param {string} oldPassword Old password for user.
     * @param {string} newPassword New password for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserPassword: async (
      oldPassword: string,
      newPassword: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'oldPassword' is not null or undefined
      assertParamExists("changeUserPassword", "oldPassword", oldPassword);
      // verify required parameter 'newPassword' is not null or undefined
      assertParamExists("changeUserPassword", "newPassword", newPassword);
      const localVarPath = `/api/v1alpha1/user/me/password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (oldPassword !== undefined) {
        localVarQueryParameter["oldPassword"] = oldPassword;
      }

      if (newPassword !== undefined) {
        localVarQueryParameter["newPassword"] = newPassword;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Exist email.
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    existEmail: async (
      email: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists("existEmail", "email", email);
      const localVarPath = `/api/v1alpha1/user/me/email/exists/{email}`.replace(
        `{${"email"}}`,
        encodeURIComponent(String(email))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get user me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMe: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1alpha1/user/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update user profile.
     * @param {UpdateUserRequest} updateUserRequest User update info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProfile: async (
      updateUserRequest: UpdateUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateUserRequest' is not null or undefined
      assertParamExists("putProfile", "updateUserRequest", updateUserRequest);
      const localVarPath = `/api/v1alpha1/user/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Send verification code.
     * @param {'EMAIL' | 'PHONE_MSG' | 'OTHER'} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendVerificationCode: async (
      type: "EMAIL" | "PHONE_MSG" | "OTHER",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      assertParamExists("sendVerificationCode", "type", type);
      const localVarPath =
        `/api/v1alpha1/user/me/verificationCode/{type}`.replace(
          `{${"type"}}`,
          encodeURIComponent(String(type))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update user username.
     * @param {string} newUsername
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsername: async (
      newUsername: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'newUsername' is not null or undefined
      assertParamExists("updateUsername", "newUsername", newUsername);
      const localVarPath =
        `/api/v1alpha1/user/me/username/{newUsername}`.replace(
          `{${"newUsername"}}`,
          encodeURIComponent(String(newUsername))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * V1alpha1UserMeApi - functional programming interface
 * @export
 */
export const V1alpha1UserMeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    V1alpha1UserMeApiAxiosParamCreator(configuration);
  return {
    /**
     * Bind user and email.
     * @param {string} email Email for user.
     * @param {string} verificationCode Verification code once.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async bindEmail(
      email: string,
      verificationCode: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bindEmail(
        email,
        verificationCode,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Bind user and telephone.
     * @param {string} telephone Telephone for user.
     * @param {string} verificationCode Verification code once.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async bindTelephone(
      telephone: string,
      verificationCode: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bindTelephone(
        telephone,
        verificationCode,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Change user password.
     * @param {string} oldPassword Old password for user.
     * @param {string} newPassword New password for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeUserPassword(
      oldPassword: string,
      newPassword: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeUserPassword(
          oldPassword,
          newPassword,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Exist email.
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async existEmail(
      email: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.existEmail(
        email,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get user me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserMe(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMe(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update user profile.
     * @param {UpdateUserRequest} updateUserRequest User update info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putProfile(
      updateUserRequest: UpdateUserRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putProfile(
        updateUserRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Send verification code.
     * @param {'EMAIL' | 'PHONE_MSG' | 'OTHER'} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendVerificationCode(
      type: "EMAIL" | "PHONE_MSG" | "OTHER",
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.sendVerificationCode(type, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update user username.
     * @param {string} newUsername
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUsername(
      newUsername: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsername(
        newUsername,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * V1alpha1UserMeApi - factory interface
 * @export
 */
export const V1alpha1UserMeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = V1alpha1UserMeApiFp(configuration);
  return {
    /**
     * Bind user and email.
     * @param {V1alpha1UserMeApiBindEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    bindEmail(
      requestParameters: V1alpha1UserMeApiBindEmailRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .bindEmail(
          requestParameters.email,
          requestParameters.verificationCode,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Bind user and telephone.
     * @param {V1alpha1UserMeApiBindTelephoneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    bindTelephone(
      requestParameters: V1alpha1UserMeApiBindTelephoneRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .bindTelephone(
          requestParameters.telephone,
          requestParameters.verificationCode,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Change user password.
     * @param {V1alpha1UserMeApiChangeUserPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserPassword(
      requestParameters: V1alpha1UserMeApiChangeUserPasswordRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .changeUserPassword(
          requestParameters.oldPassword,
          requestParameters.newPassword,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Exist email.
     * @param {V1alpha1UserMeApiExistEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    existEmail(
      requestParameters: V1alpha1UserMeApiExistEmailRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<boolean> {
      return localVarFp
        .existEmail(requestParameters.email, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get user me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMe(options?: AxiosRequestConfig): AxiosPromise<User> {
      return localVarFp
        .getUserMe(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update user profile.
     * @param {V1alpha1UserMeApiPutProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProfile(
      requestParameters: V1alpha1UserMeApiPutProfileRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<User> {
      return localVarFp
        .putProfile(requestParameters.updateUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Send verification code.
     * @param {V1alpha1UserMeApiSendVerificationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendVerificationCode(
      requestParameters: V1alpha1UserMeApiSendVerificationCodeRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .sendVerificationCode(requestParameters.type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update user username.
     * @param {V1alpha1UserMeApiUpdateUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsername(
      requestParameters: V1alpha1UserMeApiUpdateUsernameRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .updateUsername(requestParameters.newUsername, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for bindEmail operation in V1alpha1UserMeApi.
 * @export
 * @interface V1alpha1UserMeApiBindEmailRequest
 */
export interface V1alpha1UserMeApiBindEmailRequest {
  /**
   * Email for user.
   * @type {string}
   * @memberof V1alpha1UserMeApiBindEmail
   */
  readonly email: string;

  /**
   * Verification code once.
   * @type {string}
   * @memberof V1alpha1UserMeApiBindEmail
   */
  readonly verificationCode: string;
}

/**
 * Request parameters for bindTelephone operation in V1alpha1UserMeApi.
 * @export
 * @interface V1alpha1UserMeApiBindTelephoneRequest
 */
export interface V1alpha1UserMeApiBindTelephoneRequest {
  /**
   * Telephone for user.
   * @type {string}
   * @memberof V1alpha1UserMeApiBindTelephone
   */
  readonly telephone: string;

  /**
   * Verification code once.
   * @type {string}
   * @memberof V1alpha1UserMeApiBindTelephone
   */
  readonly verificationCode: string;
}

/**
 * Request parameters for changeUserPassword operation in V1alpha1UserMeApi.
 * @export
 * @interface V1alpha1UserMeApiChangeUserPasswordRequest
 */
export interface V1alpha1UserMeApiChangeUserPasswordRequest {
  /**
   * Old password for user.
   * @type {string}
   * @memberof V1alpha1UserMeApiChangeUserPassword
   */
  readonly oldPassword: string;

  /**
   * New password for user.
   * @type {string}
   * @memberof V1alpha1UserMeApiChangeUserPassword
   */
  readonly newPassword: string;
}

/**
 * Request parameters for existEmail operation in V1alpha1UserMeApi.
 * @export
 * @interface V1alpha1UserMeApiExistEmailRequest
 */
export interface V1alpha1UserMeApiExistEmailRequest {
  /**
   *
   * @type {string}
   * @memberof V1alpha1UserMeApiExistEmail
   */
  readonly email: string;
}

/**
 * Request parameters for putProfile operation in V1alpha1UserMeApi.
 * @export
 * @interface V1alpha1UserMeApiPutProfileRequest
 */
export interface V1alpha1UserMeApiPutProfileRequest {
  /**
   * User update info.
   * @type {UpdateUserRequest}
   * @memberof V1alpha1UserMeApiPutProfile
   */
  readonly updateUserRequest: UpdateUserRequest;
}

/**
 * Request parameters for sendVerificationCode operation in V1alpha1UserMeApi.
 * @export
 * @interface V1alpha1UserMeApiSendVerificationCodeRequest
 */
export interface V1alpha1UserMeApiSendVerificationCodeRequest {
  /**
   *
   * @type {'EMAIL' | 'PHONE_MSG' | 'OTHER'}
   * @memberof V1alpha1UserMeApiSendVerificationCode
   */
  readonly type: "EMAIL" | "PHONE_MSG" | "OTHER";
}

/**
 * Request parameters for updateUsername operation in V1alpha1UserMeApi.
 * @export
 * @interface V1alpha1UserMeApiUpdateUsernameRequest
 */
export interface V1alpha1UserMeApiUpdateUsernameRequest {
  /**
   *
   * @type {string}
   * @memberof V1alpha1UserMeApiUpdateUsername
   */
  readonly newUsername: string;
}

/**
 * V1alpha1UserMeApi - object-oriented interface
 * @export
 * @class V1alpha1UserMeApi
 * @extends {BaseAPI}
 */
export class V1alpha1UserMeApi extends BaseAPI {
  /**
   * Bind user and email.
   * @param {V1alpha1UserMeApiBindEmailRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof V1alpha1UserMeApi
   */
  public bindEmail(
    requestParameters: V1alpha1UserMeApiBindEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1UserMeApiFp(this.configuration)
      .bindEmail(
        requestParameters.email,
        requestParameters.verificationCode,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Bind user and telephone.
   * @param {V1alpha1UserMeApiBindTelephoneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof V1alpha1UserMeApi
   */
  public bindTelephone(
    requestParameters: V1alpha1UserMeApiBindTelephoneRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1UserMeApiFp(this.configuration)
      .bindTelephone(
        requestParameters.telephone,
        requestParameters.verificationCode,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Change user password.
   * @param {V1alpha1UserMeApiChangeUserPasswordRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1UserMeApi
   */
  public changeUserPassword(
    requestParameters: V1alpha1UserMeApiChangeUserPasswordRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1UserMeApiFp(this.configuration)
      .changeUserPassword(
        requestParameters.oldPassword,
        requestParameters.newPassword,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Exist email.
   * @param {V1alpha1UserMeApiExistEmailRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1UserMeApi
   */
  public existEmail(
    requestParameters: V1alpha1UserMeApiExistEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1UserMeApiFp(this.configuration)
      .existEmail(requestParameters.email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get user me.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1UserMeApi
   */
  public getUserMe(options?: AxiosRequestConfig) {
    return V1alpha1UserMeApiFp(this.configuration)
      .getUserMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update user profile.
   * @param {V1alpha1UserMeApiPutProfileRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1UserMeApi
   */
  public putProfile(
    requestParameters: V1alpha1UserMeApiPutProfileRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1UserMeApiFp(this.configuration)
      .putProfile(requestParameters.updateUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Send verification code.
   * @param {V1alpha1UserMeApiSendVerificationCodeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1UserMeApi
   */
  public sendVerificationCode(
    requestParameters: V1alpha1UserMeApiSendVerificationCodeRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1UserMeApiFp(this.configuration)
      .sendVerificationCode(requestParameters.type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update user username.
   * @param {V1alpha1UserMeApiUpdateUsernameRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1UserMeApi
   */
  public updateUsername(
    requestParameters: V1alpha1UserMeApiUpdateUsernameRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1UserMeApiFp(this.configuration)
      .updateUsername(requestParameters.newUsername, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
