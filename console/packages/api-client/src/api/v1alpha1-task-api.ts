/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError,
} from '../base';
// @ts-ignore
import { PagingWrap } from '../models';
// @ts-ignore
import { TaskEntity } from '../models';
/**
 * V1alpha1TaskApi - axios parameter creator
 * @export
 */
export const V1alpha1TaskApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		findTaskByName: async (
			name: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('findTaskByName', 'name', name);
			const localVarPath = `/api/v1alpha1/task/name/{name}`.replace(
				`{${'name'}}`,
				encodeURIComponent(String(name))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		findTaskProcess: async (
			name: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('findTaskProcess', 'name', name);
			const localVarPath = `/api/v1alpha1/task/process/{name}`.replace(
				`{${'name'}}`,
				encodeURIComponent(String(name))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * List tasks by condition.
		 * @param {number} [page] 第几页，从1开始, 默认为1.
		 * @param {number} [size] 每页条数，默认为10.
		 * @param {string} [name] 经过Basic64编码的任务名称，模糊匹配.
		 * @param {'CREATE' | 'RUNNING' | 'FINISH' | 'CANCEL' | 'FAIL'} [status] 任务状态，精准匹配.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listTasksByCondition: async (
			page?: number,
			size?: number,
			name?: string,
			status?: 'CREATE' | 'RUNNING' | 'FINISH' | 'CANCEL' | 'FAIL',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v1alpha1/tasks/condition`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication BasicAuth required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			// authentication BearerAuth required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (page !== undefined) {
				localVarQueryParameter['page'] = page;
			}

			if (size !== undefined) {
				localVarQueryParameter['size'] = size;
			}

			if (name !== undefined) {
				localVarQueryParameter['name'] = name;
			}

			if (status !== undefined) {
				localVarQueryParameter['status'] = status;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * V1alpha1TaskApi - functional programming interface
 * @export
 */
export const V1alpha1TaskApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		V1alpha1TaskApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async findTaskByName(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskEntity>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.findTaskByName(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async findTaskProcess(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.findTaskProcess(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 * List tasks by condition.
		 * @param {number} [page] 第几页，从1开始, 默认为1.
		 * @param {number} [size] 每页条数，默认为10.
		 * @param {string} [name] 经过Basic64编码的任务名称，模糊匹配.
		 * @param {'CREATE' | 'RUNNING' | 'FINISH' | 'CANCEL' | 'FAIL'} [status] 任务状态，精准匹配.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async listTasksByCondition(
			page?: number,
			size?: number,
			name?: string,
			status?: 'CREATE' | 'RUNNING' | 'FINISH' | 'CANCEL' | 'FAIL',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingWrap>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.listTasksByCondition(
					page,
					size,
					name,
					status,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * V1alpha1TaskApi - factory interface
 * @export
 */
export const V1alpha1TaskApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = V1alpha1TaskApiFp(configuration);
	return {
		/**
		 *
		 * @param {V1alpha1TaskApiFindTaskByNameRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		findTaskByName(
			requestParameters: V1alpha1TaskApiFindTaskByNameRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<TaskEntity> {
			return localVarFp
				.findTaskByName(requestParameters.name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {V1alpha1TaskApiFindTaskProcessRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		findTaskProcess(
			requestParameters: V1alpha1TaskApiFindTaskProcessRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<number> {
			return localVarFp
				.findTaskProcess(requestParameters.name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * List tasks by condition.
		 * @param {V1alpha1TaskApiListTasksByConditionRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listTasksByCondition(
			requestParameters: V1alpha1TaskApiListTasksByConditionRequest = {},
			options?: AxiosRequestConfig
		): AxiosPromise<PagingWrap> {
			return localVarFp
				.listTasksByCondition(
					requestParameters.page,
					requestParameters.size,
					requestParameters.name,
					requestParameters.status,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for findTaskByName operation in V1alpha1TaskApi.
 * @export
 * @interface V1alpha1TaskApiFindTaskByNameRequest
 */
export interface V1alpha1TaskApiFindTaskByNameRequest {
	/**
	 *
	 * @type {string}
	 * @memberof V1alpha1TaskApiFindTaskByName
	 */
	readonly name: string;
}

/**
 * Request parameters for findTaskProcess operation in V1alpha1TaskApi.
 * @export
 * @interface V1alpha1TaskApiFindTaskProcessRequest
 */
export interface V1alpha1TaskApiFindTaskProcessRequest {
	/**
	 *
	 * @type {string}
	 * @memberof V1alpha1TaskApiFindTaskProcess
	 */
	readonly name: string;
}

/**
 * Request parameters for listTasksByCondition operation in V1alpha1TaskApi.
 * @export
 * @interface V1alpha1TaskApiListTasksByConditionRequest
 */
export interface V1alpha1TaskApiListTasksByConditionRequest {
	/**
	 * 第几页，从1开始, 默认为1.
	 * @type {number}
	 * @memberof V1alpha1TaskApiListTasksByCondition
	 */
	readonly page?: number;

	/**
	 * 每页条数，默认为10.
	 * @type {number}
	 * @memberof V1alpha1TaskApiListTasksByCondition
	 */
	readonly size?: number;

	/**
	 * 经过Basic64编码的任务名称，模糊匹配.
	 * @type {string}
	 * @memberof V1alpha1TaskApiListTasksByCondition
	 */
	readonly name?: string;

	/**
	 * 任务状态，精准匹配.
	 * @type {'CREATE' | 'RUNNING' | 'FINISH' | 'CANCEL' | 'FAIL'}
	 * @memberof V1alpha1TaskApiListTasksByCondition
	 */
	readonly status?: 'CREATE' | 'RUNNING' | 'FINISH' | 'CANCEL' | 'FAIL';
}

/**
 * V1alpha1TaskApi - object-oriented interface
 * @export
 * @class V1alpha1TaskApi
 * @extends {BaseAPI}
 */
export class V1alpha1TaskApi extends BaseAPI {
	/**
	 *
	 * @param {V1alpha1TaskApiFindTaskByNameRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1TaskApi
	 */
	public findTaskByName(
		requestParameters: V1alpha1TaskApiFindTaskByNameRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1TaskApiFp(this.configuration)
			.findTaskByName(requestParameters.name, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {V1alpha1TaskApiFindTaskProcessRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1TaskApi
	 */
	public findTaskProcess(
		requestParameters: V1alpha1TaskApiFindTaskProcessRequest,
		options?: AxiosRequestConfig
	) {
		return V1alpha1TaskApiFp(this.configuration)
			.findTaskProcess(requestParameters.name, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * List tasks by condition.
	 * @param {V1alpha1TaskApiListTasksByConditionRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof V1alpha1TaskApi
	 */
	public listTasksByCondition(
		requestParameters: V1alpha1TaskApiListTasksByConditionRequest = {},
		options?: AxiosRequestConfig
	) {
		return V1alpha1TaskApiFp(this.configuration)
			.listTasksByCondition(
				requestParameters.page,
				requestParameters.size,
				requestParameters.name,
				requestParameters.status,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}
