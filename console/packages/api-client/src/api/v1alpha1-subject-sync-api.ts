/* tslint:disable */
/* eslint-disable */
/**
 * Ikaros Open API Documentation
 * Documentation for Ikaros Open API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Subject } from "../models";
// @ts-ignore
import { SubjectSync } from "../models";
/**
 * V1alpha1SubjectSyncApi - axios parameter creator
 * @export
 */
export const V1alpha1SubjectSyncApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get subject syncs by subject id.
     * @param {'BGM_TV' | 'TMDB' | 'AniDB' | 'TVDB' | 'VNDB' | 'DOU_BAN' | 'OTHER'} platform Platform.
     * @param {number} platformId Platform id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubjectSyncsByPlatformAndPlatformId: async (
      platform:
        | "BGM_TV"
        | "TMDB"
        | "AniDB"
        | "TVDB"
        | "VNDB"
        | "DOU_BAN"
        | "OTHER",
      platformId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'platform' is not null or undefined
      assertParamExists(
        "getSubjectSyncsByPlatformAndPlatformId",
        "platform",
        platform
      );
      // verify required parameter 'platformId' is not null or undefined
      assertParamExists(
        "getSubjectSyncsByPlatformAndPlatformId",
        "platformId",
        platformId
      );
      const localVarPath = `/api/v1alpha1/subject/syncs/platform`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform;
      }

      if (platformId !== undefined) {
        localVarQueryParameter["platformId"] = platformId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get subject syncs by subject id.
     * @param {number} id Subject id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubjectSyncsBySubjectId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getSubjectSyncsBySubjectId", "id", id);
      const localVarPath = `/api/v1alpha1/subject/syncs/subjectId/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Sync subject and platform by platform name and platform id, create subject when params not contain subject id, update exists subject when params contain subject id.
     * @param {'BGM_TV' | 'TMDB' | 'AniDB' | 'TVDB' | 'VNDB' | 'DOU_BAN' | 'OTHER'} platform Platform.
     * @param {string} platformId Platform id
     * @param {number} [subjectId] Subject id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncSubjectAndPlatform: async (
      platform:
        | "BGM_TV"
        | "TMDB"
        | "AniDB"
        | "TVDB"
        | "VNDB"
        | "DOU_BAN"
        | "OTHER",
      platformId: string,
      subjectId?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'platform' is not null or undefined
      assertParamExists("syncSubjectAndPlatform", "platform", platform);
      // verify required parameter 'platformId' is not null or undefined
      assertParamExists("syncSubjectAndPlatform", "platformId", platformId);
      const localVarPath = `/api/v1alpha1/subject/sync/platform`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (subjectId !== undefined) {
        localVarQueryParameter["subjectId"] = subjectId;
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform;
      }

      if (platformId !== undefined) {
        localVarQueryParameter["platformId"] = platformId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * V1alpha1SubjectSyncApi - functional programming interface
 * @export
 */
export const V1alpha1SubjectSyncApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    V1alpha1SubjectSyncApiAxiosParamCreator(configuration);
  return {
    /**
     * Get subject syncs by subject id.
     * @param {'BGM_TV' | 'TMDB' | 'AniDB' | 'TVDB' | 'VNDB' | 'DOU_BAN' | 'OTHER'} platform Platform.
     * @param {number} platformId Platform id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubjectSyncsByPlatformAndPlatformId(
      platform:
        | "BGM_TV"
        | "TMDB"
        | "AniDB"
        | "TVDB"
        | "VNDB"
        | "DOU_BAN"
        | "OTHER",
      platformId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<SubjectSync>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSubjectSyncsByPlatformAndPlatformId(
          platform,
          platformId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get subject syncs by subject id.
     * @param {number} id Subject id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubjectSyncsBySubjectId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<SubjectSync>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSubjectSyncsBySubjectId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Sync subject and platform by platform name and platform id, create subject when params not contain subject id, update exists subject when params contain subject id.
     * @param {'BGM_TV' | 'TMDB' | 'AniDB' | 'TVDB' | 'VNDB' | 'DOU_BAN' | 'OTHER'} platform Platform.
     * @param {string} platformId Platform id
     * @param {number} [subjectId] Subject id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async syncSubjectAndPlatform(
      platform:
        | "BGM_TV"
        | "TMDB"
        | "AniDB"
        | "TVDB"
        | "VNDB"
        | "DOU_BAN"
        | "OTHER",
      platformId: string,
      subjectId?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.syncSubjectAndPlatform(
          platform,
          platformId,
          subjectId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * V1alpha1SubjectSyncApi - factory interface
 * @export
 */
export const V1alpha1SubjectSyncApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = V1alpha1SubjectSyncApiFp(configuration);
  return {
    /**
     * Get subject syncs by subject id.
     * @param {V1alpha1SubjectSyncApiGetSubjectSyncsByPlatformAndPlatformIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubjectSyncsByPlatformAndPlatformId(
      requestParameters: V1alpha1SubjectSyncApiGetSubjectSyncsByPlatformAndPlatformIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Array<SubjectSync>> {
      return localVarFp
        .getSubjectSyncsByPlatformAndPlatformId(
          requestParameters.platform,
          requestParameters.platformId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get subject syncs by subject id.
     * @param {V1alpha1SubjectSyncApiGetSubjectSyncsBySubjectIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubjectSyncsBySubjectId(
      requestParameters: V1alpha1SubjectSyncApiGetSubjectSyncsBySubjectIdRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Array<SubjectSync>> {
      return localVarFp
        .getSubjectSyncsBySubjectId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Sync subject and platform by platform name and platform id, create subject when params not contain subject id, update exists subject when params contain subject id.
     * @param {V1alpha1SubjectSyncApiSyncSubjectAndPlatformRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncSubjectAndPlatform(
      requestParameters: V1alpha1SubjectSyncApiSyncSubjectAndPlatformRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<Subject> {
      return localVarFp
        .syncSubjectAndPlatform(
          requestParameters.platform,
          requestParameters.platformId,
          requestParameters.subjectId,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getSubjectSyncsByPlatformAndPlatformId operation in V1alpha1SubjectSyncApi.
 * @export
 * @interface V1alpha1SubjectSyncApiGetSubjectSyncsByPlatformAndPlatformIdRequest
 */
export interface V1alpha1SubjectSyncApiGetSubjectSyncsByPlatformAndPlatformIdRequest {
  /**
   * Platform.
   * @type {'BGM_TV' | 'TMDB' | 'AniDB' | 'TVDB' | 'VNDB' | 'DOU_BAN' | 'OTHER'}
   * @memberof V1alpha1SubjectSyncApiGetSubjectSyncsByPlatformAndPlatformId
   */
  readonly platform:
    | "BGM_TV"
    | "TMDB"
    | "AniDB"
    | "TVDB"
    | "VNDB"
    | "DOU_BAN"
    | "OTHER";

  /**
   * Platform id
   * @type {number}
   * @memberof V1alpha1SubjectSyncApiGetSubjectSyncsByPlatformAndPlatformId
   */
  readonly platformId: number;
}

/**
 * Request parameters for getSubjectSyncsBySubjectId operation in V1alpha1SubjectSyncApi.
 * @export
 * @interface V1alpha1SubjectSyncApiGetSubjectSyncsBySubjectIdRequest
 */
export interface V1alpha1SubjectSyncApiGetSubjectSyncsBySubjectIdRequest {
  /**
   * Subject id
   * @type {number}
   * @memberof V1alpha1SubjectSyncApiGetSubjectSyncsBySubjectId
   */
  readonly id: number;
}

/**
 * Request parameters for syncSubjectAndPlatform operation in V1alpha1SubjectSyncApi.
 * @export
 * @interface V1alpha1SubjectSyncApiSyncSubjectAndPlatformRequest
 */
export interface V1alpha1SubjectSyncApiSyncSubjectAndPlatformRequest {
  /**
   * Platform.
   * @type {'BGM_TV' | 'TMDB' | 'AniDB' | 'TVDB' | 'VNDB' | 'DOU_BAN' | 'OTHER'}
   * @memberof V1alpha1SubjectSyncApiSyncSubjectAndPlatform
   */
  readonly platform:
    | "BGM_TV"
    | "TMDB"
    | "AniDB"
    | "TVDB"
    | "VNDB"
    | "DOU_BAN"
    | "OTHER";

  /**
   * Platform id
   * @type {string}
   * @memberof V1alpha1SubjectSyncApiSyncSubjectAndPlatform
   */
  readonly platformId: string;

  /**
   * Subject id.
   * @type {number}
   * @memberof V1alpha1SubjectSyncApiSyncSubjectAndPlatform
   */
  readonly subjectId?: number;
}

/**
 * V1alpha1SubjectSyncApi - object-oriented interface
 * @export
 * @class V1alpha1SubjectSyncApi
 * @extends {BaseAPI}
 */
export class V1alpha1SubjectSyncApi extends BaseAPI {
  /**
   * Get subject syncs by subject id.
   * @param {V1alpha1SubjectSyncApiGetSubjectSyncsByPlatformAndPlatformIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1SubjectSyncApi
   */
  public getSubjectSyncsByPlatformAndPlatformId(
    requestParameters: V1alpha1SubjectSyncApiGetSubjectSyncsByPlatformAndPlatformIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1SubjectSyncApiFp(this.configuration)
      .getSubjectSyncsByPlatformAndPlatformId(
        requestParameters.platform,
        requestParameters.platformId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get subject syncs by subject id.
   * @param {V1alpha1SubjectSyncApiGetSubjectSyncsBySubjectIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1SubjectSyncApi
   */
  public getSubjectSyncsBySubjectId(
    requestParameters: V1alpha1SubjectSyncApiGetSubjectSyncsBySubjectIdRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1SubjectSyncApiFp(this.configuration)
      .getSubjectSyncsBySubjectId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Sync subject and platform by platform name and platform id, create subject when params not contain subject id, update exists subject when params contain subject id.
   * @param {V1alpha1SubjectSyncApiSyncSubjectAndPlatformRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1alpha1SubjectSyncApi
   */
  public syncSubjectAndPlatform(
    requestParameters: V1alpha1SubjectSyncApiSyncSubjectAndPlatformRequest,
    options?: AxiosRequestConfig
  ) {
    return V1alpha1SubjectSyncApiFp(this.configuration)
      .syncSubjectAndPlatform(
        requestParameters.platform,
        requestParameters.platformId,
        requestParameters.subjectId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
