import org.apache.tools.ant.filters.ReplaceTokens
import org.springframework.core.io.ClassPathResource

plugins {
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.gorylenko.gradle-git-properties" version "2.3.2"
    id "checkstyle"
    id 'java'
    id 'jacoco'
    id "io.freefair.lombok" version "8.0.0-rc2"
    id "com.github.node-gradle.node" version "3.3.0"
}

group = "run.ikaros.server"
sourceCompatibility = JavaVersion.VERSION_17

checkstyle {
    toolVersion = "9.3"
    showViolations = false
    ignoreFailures = false
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
}

repositories {
    mavenCentral()

    maven { url 'https://repo.spring.io/milestone' }
    mavenLocal()
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

springBoot {
    buildInfo()
}

bootJar {
    manifest {
        attributes "Implementation-Title": "Ikaros Application",
                "Implementation-Version": archiveVersion
    }
    archiveFileName = "ikaros-server.jar"
}

tasks.named('jar') {
    enabled = false
}

ext {
    commonsLang3 = "3.12.0"
    pf4j = '3.9.0'
    jsoup = '1.15.3'
    springDocOpenAPI = "2.0.2"
    flywaydb = "10.15.0"
}

dependencies {
    implementation project(':api')

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.springframework:spring-context-indexer"

    // 针对插件RestTemplate的支持
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    implementation 'org.json:json:20230227'

    implementation "org.flywaydb:flyway-core:$flywaydb"


    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    runtimeOnly "org.flywaydb:flyway-database-postgresql:$flywaydb"


    // 针对logback.xml if 不工作的支持
//    implementation 'org.codehaus.janino:janino:3.1.11'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.projectreactor:reactor-test'
}


node {
    nodeProjectDir = file("${rootProject.projectDir}/console")
}

task pnpmInstallPackageShared(type: NpxTask) {
    command = 'pnpm'
    args = ['--filter', './packages/shared', 'install']
}

task buildFrontendPackageShared(type: NpxTask) {
    command = 'pnpm'
    args = ['--filter', './packages/shared', 'build']
    dependsOn("pnpmInstallPackageShared")
}

task pnpmInstallPackageApiClient(type: NpxTask) {
    command = 'pnpm'
    args = ['--filter', './packages/api-client', 'install']
}

task buildFrontendPackageApiClient(type: NpxTask) {
    command = 'pnpm'
    args = ['--filter', './packages/api-client', 'build']
    dependsOn("pnpmInstallPackageApiClient")
}

task pnpmInstallFrontend(type: NpxTask) {
    command = "pnpm"
    args = ["install"]
    dependsOn("buildFrontendPackageShared", "buildFrontendPackageApiClient")
}

task buildFrontend(type: NpxTask) {
    command = 'pnpm'
    args = ['build']
    dependsOn("pnpmInstallFrontend")
}

task pnpmDev(type: NpxTask) {
    command = "pnpm"
    args = ["dev"]
    dependsOn("buildFrontend")
}

build {
    // build frontend before build
    // tasks.getByName('compileJava').dependsOn('buildFrontend')
}


tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('jacocoTestReport') {
    reports {
        xml.required = true
        html.required = true
    }
//    afterEvaluate {
//        classDirectories.setFrom(files(classDirectories.files.collect {
//            fileTree(dir: it, exclude: [
//                    "run/ikaros/core/IkarosApplication.class",
//                    "run/ikaros/core/infra/properties/*",
//                    "run/ikaros/core/store/entity/*",
//                    "run/ikaros/core/store/enums/*"
//            ])
//        }))
//    }
}

